<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GemCard</name>
    </assembly>
    <members>
        <member name="T:GemCard.APDUCommand">
            <summary>
            This class represents a command APDU
            </summary>
        </member>
        <member name="F:GemCard.APDUCommand.APDU_MIN_LENGTH">
            <summary>
            Minimun size in bytes of an APDU command
            </summary>
        </member>
        <member name="M:GemCard.APDUCommand.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[],System.Int16)">
            <summary>
            Constructor
            </summary>
            <param name="bCla">Class byte</param>
            <param name="bIns">Instruction byte</param>
            <param name="bP1">Parameter P1 byte</param>
            <param name="bP2">Parameter P2 byte</param>
            <param name="baData">Data to send to the card if any, null if no data to send</param>
            <param name="bLe">Number of data expected, 0 if none</param>
        </member>
        <member name="M:GemCard.APDUCommand.Update(GemCard.APDUParam)">
            <summary>
            Update the current APDU with selected parameters
            </summary>
            <param name="apduParam">APDU parameters</param>
        </member>
        <member name="P:GemCard.APDUCommand.Class">
            <summary>
            Class get property
            </summary>
        </member>
        <member name="P:GemCard.APDUCommand.Ins">
            <summary>
            Instruction get property
            </summary>
        </member>
        <member name="P:GemCard.APDUCommand.P1">
            <summary>
            Parameter P1 get property
            </summary>
        </member>
        <member name="P:GemCard.APDUCommand.P2">
            <summary>
            Parameter P2 get property
            </summary>
        </member>
        <member name="P:GemCard.APDUCommand.Data">
            <summary>
            Data get property
            </summary>
        </member>
        <member name="P:GemCard.APDUCommand.Le">
            <summary>
            Length expected get property
            </summary>
        </member>
        <member name="M:GemCard.APDUCommand.ToString">
            <summary>
            Overrides the ToString method to format to a string the APDUCommand object
            </summary>
            <returns></returns>
        </member>
        <member name="T:GemCard.APDUParam">
            <summary>
            This class is used to update a set of parameters of an APDUCommand object
            </summary>
        </member>
        <member name="M:GemCard.APDUParam.#ctor(GemCard.APDUParam)">
            <summary>
            Copy constructor (used for cloning)
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:GemCard.APDUParam.Clone">
            <summary>
            Clones the current APDUParam instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:GemCard.APDUParam.Reset">
            <summary>
            Resets the current instance, all flags are set to false
            </summary>
        </member>
        <member name="T:GemCard.APDUResponse">
            <summary>
            This class represents the APDU response sent by the card
            </summary>
        </member>
        <member name="F:GemCard.APDUResponse.SW_LENGTH">
            <summary>
            Status bytes length
            </summary>
        </member>
        <member name="M:GemCard.APDUResponse.#ctor(System.Byte[])">
            <summary>
            Constructor from the byte data sent back by the card
            </summary>
            <param name="baData">Buffer of data from the card</param>
        </member>
        <member name="P:GemCard.APDUResponse.Data">
            <summary>
            Response data get property. Contains the data sent by the card minus the 2 status bytes (SW1, SW2)
            null if no data were sent by the card
            </summary>
        </member>
        <member name="P:GemCard.APDUResponse.SW1">
            <summary>
            SW1 byte get property
            </summary>
        </member>
        <member name="P:GemCard.APDUResponse.SW2">
            <summary>
            SW2 byte get property
            </summary>
        </member>
        <member name="P:GemCard.APDUResponse.Status">
            <summary>
            Status get property
            </summary>
        </member>
        <member name="M:GemCard.APDUResponse.ToString">
            <summary>
            Overrides the ToString method to format to a string the APDUResponse object
            </summary>
            <returns></returns>
        </member>
        <member name="T:GemCard.SCARD_ATTR_VALUE">
            <summary>
            Values for AttrId of SCardGetAttrib
            </summary>
        </member>
        <member name="T:GemCard.CardInsertedEventHandler">
            <summary>
            Delegate for the CardInserted event
            </summary>
        </member>
        <member name="T:GemCard.CardRemovedEventHandler">
            <summary>
            Delegate for the CardRemoved event
            </summary>
        </member>
        <member name="T:GemCard.CardBase">
            <summary>
            Abstract class that adds a basic event management to the ICard interface. 
            </summary>
        </member>
        <member name="E:GemCard.CardBase.OnCardInserted">
            <summary>
            Event handler for the card insertion
            </summary>
        </member>
        <member name="E:GemCard.CardBase.OnCardRemoved">
            <summary>
            Event handler for the card removal
            </summary>
        </member>
        <member name="M:GemCard.CardBase.StartCardEvents(System.String)">
            <summary>
            This method should start a thread that checks for card insertion or removal
            </summary>
            <param name="Reader"></param>
        </member>
        <member name="M:GemCard.CardBase.StopCardEvents">
            <summary>
            Stops the card events thread
            </summary>
        </member>
        <member name="M:GemCard.CardBase.RunCardDetection(System.Object)">
            <summary>
            This function must implement a card detection mechanism.
            
            When card insertion is detected, it must call the method CardInserted()
            When card removal is detected, it must call the method CardRemoved()
            
            </summary>
            <param name="Reader">Name of the reader to scan for card event</param>
        </member>
        <member name="T:GemCard.CARD_STATE">
            <summary>
            CARD_STATE enumeration, used by the PC/SC function SCardGetStatusChanged
            </summary>
        </member>
        <member name="T:GemCard.SCard_IO_Request">
            <summary>
            Wraps the SCARD_IO_STRUCTURE
             
            </summary>
        </member>
        <member name="T:GemCard.SCard_ReaderState">
            <summary>
            Wraps theSCARD_READERSTATE structure of PC/SC
            </summary>
        </member>
        <member name="T:GemCard.CardNative">
            <summary>
            Implementation of ICard using native (P/Invoke) interoperability for PC/SC
            </summary>
        </member>
        <member name="M:GemCard.CardNative.SCardGetStatusChange(System.IntPtr,System.UInt32,GemCard.SCard_ReaderState[],System.UInt32)">
            <summary>
            Native SCardGetStatusChanged from winscard.dll
            </summary>
            <param name="hContext"></param>
            <param name="dwTimeout"></param>
            <param name="rgReaderStates"></param>
            <param name="cReaders"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardListReaders(System.IntPtr,System.String,System.IntPtr,System.UInt32@)">
            <summary>
            Native SCardListReaders function from winscard.dll
            </summary>
            <param name="hContext"></param>
            <param name="mszGroups"></param>
            <param name="mszReaders"></param>
            <param name="pcchReaders"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardEstablishContext(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Native SCardEstablishContext function from winscard.dll
            </summary>
            <param name="dwScope"></param>
            <param name="pvReserved1"></param>
            <param name="pvReserved2"></param>
            <param name="phContext"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardReleaseContext(System.IntPtr)">
            <summary>
            Native SCardReleaseContext function from winscard.dll
            </summary>
            <param name="hContext"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardIsValidContext(System.IntPtr)">
            <summary>
            Native SCardIsValidContext function from winscard.dll
            </summary>
            <param name="hContext"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardConnect(System.IntPtr,System.String,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Native SCardConnect function from winscard.dll
            </summary>
            <param name="hContext"></param>
            <param name="szReader"></param>
            <param name="dwShareMode"></param>
            <param name="dwPreferredProtocols"></param>
            <param name="phCard"></param>
            <param name="pdwActiveProtocol"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardDisconnect(System.IntPtr,System.UInt32)">
            <summary>
            Native SCardDisconnect function from winscard.dll
            </summary>
            <param name="hCard"></param>
            <param name="dwDisposition"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardTransmit(System.IntPtr,GemCard.SCard_IO_Request@,System.Byte[],System.UInt32,System.IntPtr,System.Byte[],System.UInt32@)">
            <summary>
            Native SCardTransmit function from winscard.dll
            </summary>
            <param name="hCard"></param>
            <param name="pioSendPci"></param>
            <param name="pbSendBuffer"></param>
            <param name="cbSendLength"></param>
            <param name="pioRecvPci"></param>
            <param name="pbRecvBuffer"></param>
            <param name="pcbRecvLength"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardBeginTransaction(System.IntPtr)">
            <summary>
            Native SCardBeginTransaction function of winscard.dll
            </summary>
            <param name="hContext"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.SCardEndTransaction(System.IntPtr,System.UInt32)">
            <summary>
            Native SCardEndTransaction function of winscard.dll
            </summary>
            <param name="hContext"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GemCard.CardNative.Finalize">
            <summary>
            Object destruction
            </summary>
        </member>
        <member name="M:GemCard.CardNative.ListReaders">
            <summary>
            Wraps the PCSC function
            LONG SCardListReaders(SCARDCONTEXT hContext, 
            	LPCTSTR mszGroups, 
            	LPTSTR mszReaders, 
            	LPDWORD pcchReaders 
            );
            </summary>
            <returns>A string array of the readers</returns>
        </member>
        <member name="M:GemCard.CardNative.EstablishContext(GemCard.SCOPE)">
            <summary>
            Wraps the PCSC function 
            LONG SCardEstablishContext(
            	IN DWORD dwScope,
            	IN LPCVOID pvReserved1,
            	IN LPCVOID pvReserved2,
            	OUT LPSCARDCONTEXT phContext
            );
            </summary>
            <param name="Scope"></param>
        </member>
        <member name="M:GemCard.CardNative.ReleaseContext">
            <summary>
            Wraps the PCSC function
            LONG SCardReleaseContext(
            	IN SCARDCONTEXT hContext
            );
            </summary>
        </member>
        <member name="M:GemCard.CardNative.Connect(System.String,GemCard.SHARE,GemCard.PROTOCOL)">
            <summary>
             Wraps the PCSC function
             LONG SCardConnect(
            	IN SCARDCONTEXT hContext,
            	IN LPCTSTR szReader,
            	IN DWORD dwShareMode,
            	IN DWORD dwPreferredProtocols,
            	OUT LPSCARDHANDLE phCard,
            	OUT LPDWORD pdwActiveProtocol
            );
            </summary>
            <param name="Reader"></param>
            <param name="ShareMode"></param>
            <param name="PreferredProtocols"></param>
        </member>
        <member name="M:GemCard.CardNative.Disconnect(GemCard.DISCONNECT)">
            <summary>
            Wraps the PCSC function
            LONG SCardDisconnect(
            	IN SCARDHANDLE hCard,
            	IN DWORD dwDisposition
            );
            </summary>
            <param name="Disposition"></param>
        </member>
        <member name="M:GemCard.CardNative.Transmit(GemCard.APDUCommand)">
            <summary>
            Wraps the PCSC function
            LONG SCardTransmit(
            	SCARDHANDLE hCard,
            	LPCSCARD_I0_REQUEST pioSendPci,
            	LPCBYTE pbSendBuffer,
            	DWORD cbSendLength,
            	LPSCARD_IO_REQUEST pioRecvPci,
            	LPBYTE pbRecvBuffer,
            	LPDWORD pcbRecvLength
            );
            </summary>
            <param name="ApduCmd">APDUCommand object with the APDU to send to the card</param>
            <returns>An APDUResponse object with the response from the card</returns>
        </member>
        <member name="M:GemCard.CardNative.TransmitLe(GemCard.APDUCommand,System.UInt32,System.Boolean)">
            <summary>
            Wraps the PCSC function
            LONG SCardTransmit(
            	SCARDHANDLE hCard,
            	LPCSCARD_I0_REQUEST pioSendPci,
            	LPCBYTE pbSendBuffer,
            	DWORD cbSendLength,
            	LPSCARD_IO_REQUEST pioRecvPci,
            	LPBYTE pbRecvBuffer,
            	LPDWORD pcbRecvLength
            );
            </summary>
            <param name="ApduCmd">APDUCommand object with the APDU to send to the card</param>
            <returns>An APDUResponse object with the response from the card</returns>
        </member>
        <member name="M:GemCard.CardNative.TransmitImage(GemCard.APDUCommand)">
            <summary>
            
            </summary>
            <param name="ApduCmd"></param>
            <returns></returns>
        </member>
        <member name="M:GemCard.CardNative.TransmitImageLe(GemCard.APDUCommand,System.UInt32)">
            <summary>
            
            </summary>
            <param name="ApduCmd"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GemCard.CardNative.BeginTransaction" -->
        <member name="M:GemCard.CardNative.EndTransaction(GemCard.DISCONNECT)">
            <summary>
            Wraps the PCSC function
            LONG SCardEndTransaction(
                SCARDHANDLE hCard,
                DWORD dwDisposition
            );
            </summary>
            <param name="Disposition">A value from DISCONNECT enum</param>
        </member>
        <member name="M:GemCard.CardNative.GetAttribute(System.UInt32)">
            <summary>
            Gets the attributes of the card
            </summary>
            <param name="AttribId">Identifier for the Attribute to get</param>
            <returns>Attribute content</returns>
        </member>
        <member name="M:GemCard.CardNative.RunCardDetection(System.Object)">
            <summary>
            This function must implement a card detection mechanism.
            
            When card insertion is detected, it must call the method CardInserted()
            When card removal is detected, it must call the method CardRemoved()
            
            </summary>
        </member>
        <member name="T:GemCard.ICard">
            <summary>
            This interface gives access to the basic card functions. It must be implemented by a class.
            </summary>
        </member>
        <member name="M:GemCard.ICard.ListReaders">
            <summary>
            Wraps the PCSC funciton
            LONG SCardListReaders(SCARDCONTEXT hContext, 
            	LPCTSTR mszGroups, 
            	LPTSTR mszReaders, 
            	LPDWORD pcchReaders 
            );
            </summary>
            <returns>A string array of the readers</returns>
        </member>
        <member name="M:GemCard.ICard.Connect(System.String,GemCard.SHARE,GemCard.PROTOCOL)">
            <summary>
             Wraps the PCSC function
             LONG SCardConnect(
            	IN SCARDCONTEXT hContext,
            	IN LPCTSTR szReader,
            	IN DWORD dwShareMode,
            	IN DWORD dwPreferredProtocols,
            	OUT LPSCARDHANDLE phCard,
            	OUT LPDWORD pdwActiveProtocol
            );
            </summary>
            <param name="Reader"></param>
            <param name="ShareMode"></param>
            <param name="PreferredProtocols"></param>
        </member>
        <member name="M:GemCard.ICard.Disconnect(GemCard.DISCONNECT)">
            <summary>
            Wraps the PCSC function
            LONG SCardDisconnect(
            	IN SCARDHANDLE hCard,
            	IN DWORD dwDisposition
            );
            </summary>
            <param name="Disposition"></param>
        </member>
        <member name="M:GemCard.ICard.Transmit(GemCard.APDUCommand)">
            <summary>
            Wraps the PCSC function
            LONG SCardTransmit(
            	SCARDHANDLE hCard,
            	LPCSCARD_I0_REQUEST pioSendPci,
            	LPCBYTE pbSendBuffer,
            	DWORD cbSendLength,
            	LPSCARD_IO_REQUEST pioRecvPci,
            	LPBYTE pbRecvBuffer,
            	LPDWORD pcbRecvLength
            );
            </summary>
            <param name="ApduCmd">APDUCommand object with the APDU to send to the card</param>
            <returns>An APDUResponse object with the response from the card</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GemCard.ICard.BeginTransaction" -->
        <member name="M:GemCard.ICard.EndTransaction(GemCard.DISCONNECT)">
            <summary>
            Wraps the PCSC function
            LONG SCardEndTransaction(
                SCARDHANDLE hCard,
                DWORD dwDisposition
            );
            </summary>
        </member>
        <member name="M:GemCard.ICard.GetAttribute(System.UInt32)">
            <summary>
            Gets the attributes of the card
            </summary>
            <param name="AttribId">Identifier for the Attribute to get</param>
            <returns>Attribute content</returns>
        </member>
        <member name="T:GemCard.SCOPE">
            <summary>
            SCOPE context
            </summary>
        </member>
        <member name="F:GemCard.SCOPE.User">
            <summary>
            The context is a user context, and any database operations are performed within the
            domain of the user.
            </summary>
        </member>
        <member name="F:GemCard.SCOPE.Terminal">
            <summary>
            The context is that of the current terminal, and any database operations are performed
            within the domain of that terminal.  (The calling application must have appropriate
            access permissions for any database actions.)
            </summary>
        </member>
        <member name="F:GemCard.SCOPE.System">
            <summary>
            The context is the system context, and any database operations are performed within the
            domain of the system.  (The calling application must have appropriate access
            permissions for any database actions.)
            </summary>
        </member>
        <member name="T:GemCard.SHARE">
            <summary>
            SHARE mode enumeration
            </summary>
        </member>
        <member name="F:GemCard.SHARE.Exclusive">
            <summary>
            This application is not willing to share this card with other applications.
            </summary>
        </member>
        <member name="F:GemCard.SHARE.Shared">
            <summary>
            This application is willing to share this card with other applications.
            </summary>
        </member>
        <member name="F:GemCard.SHARE.Direct">
            <summary>
            This application demands direct control of the reader, so it is not available to other applications.
            </summary>
        </member>
        <member name="T:GemCard.PROTOCOL">
            <summary>
            PROTOCOL enumeration
            </summary>
        </member>
        <member name="F:GemCard.PROTOCOL.Undefined">
            <summary>
            There is no active protocol.
            </summary>
        </member>
        <member name="F:GemCard.PROTOCOL.T0">
            <summary>
            T=0 is the active protocol.
            </summary>
        </member>
        <member name="F:GemCard.PROTOCOL.T1">
            <summary>
            T=1 is the active protocol.
            </summary>
        </member>
        <member name="F:GemCard.PROTOCOL.Raw">
            <summary>
            Raw is the active protocol.
            </summary>
        </member>
        <member name="F:GemCard.PROTOCOL.T0orT1">
            <summary>
            T=1 or T=0 can be the active protocol
            </summary>
        </member>
        <member name="T:GemCard.DISCONNECT">
            <summary>
            DISCONNECT action enumeration
            </summary>
        </member>
        <member name="F:GemCard.DISCONNECT.Leave">
            <summary>
            Don't do anything special on close
            </summary>
        </member>
        <member name="F:GemCard.DISCONNECT.Reset">
            <summary>
            Reset the card on close
            </summary>
        </member>
        <member name="F:GemCard.DISCONNECT.Unpower">
            <summary>
            Power down the card on close
            </summary>
        </member>
        <member name="F:GemCard.DISCONNECT.Eject">
            <summary>
            Eject(!) the card on close
            </summary>
        </member>
        <member name="T:GemCard.SmartCardException">
            <summary>
             Smart card exceptions
            </summary>
        </member>
    </members>
</doc>
