using System;
using System.Collections.Generic;
using System.Text;
using GemCard;
using System.Threading;
using SmartCardApi.SmartCardReader;
using System.Configuration;
using GID_Client.ServerApi;
using System.Linq;
using System.Reflection;

namespace CardAPILib.InterfaceCL
{
    /// <summary>
    /// 
    /// </summary>
    public enum CardFactoryMode
    {
        DrivingLicence,
        VehicleRegistration
    }

    public partial class CardApiMessages
    {




        ExternalAuthentificate extr = new ExternalAuthentificate();
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private static void InstallCardIDL()
        {
            SecureMessaging sc = new SecureMessaging();

            sc.InstallAppletV3();
        }

        private static void InstallCardIDLFull()
        {
            SecureMessaging sc = new SecureMessaging();

            sc.InstallAppletV1();
        }

        private static void InstallCardVL()
        {
            SecureMessaging sc = new SecureMessaging();

            sc.InstallAppletV3();
        }

        private static void InstallCardVLFull()
        {
            SecureMessaging sc = new SecureMessaging();

            sc.InstallAppletV4();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="certificate"></param>
        /// <returns></returns>
        public int SaveCertificate(string certificate)
        {

            if (Connect2Card() != 0)
            {
                log.Info("Connection Failed");
                return -1;
            }

            if (extr.ExternalAuth() != 0)
            {
                log.Info("External Authentification Failed");
                return -2;
            }

            /* SendApdu: GP.InstallForMakeSelectable PKI APPLET
            * 
            * => 80 E6 0C 00 [64] 08D276000098504B490CA000000063504B43532D31350CA000000063504B43532D313501043DC93B00431E820210649118010201020102010202040204020402040204020402040204FD0B05313131313131313131310B033131313131313131FFFF0000
               <= 009000
            */

            {
                log.Info("80 E6 0C 00 [64] 08D276000098504B490CA000000063504B43532D31350CA000000063504B43532D313501043DC93B00431E820210649118010201020102010202040204020402040204020402040204FD0B05313131313131313131310B033131313131313131FFFFFD00");

                #region 80 E6 0C 00 [64] 08D276000098504B490CA000000063504B43532D31350CA000000063504B43532D313501043DC93B00431E820210649118010201020102010202040204020402040204020402040204FD0B05313131313131313131310B033131313131313131FFFFFD00

                APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x0C, 0x00, null, 0);

                APDUParam apduParam5 = new APDUParam();

                apduParam5.Data = new byte[100] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x50, 0x4B, 0x49, 0x0C, 0xA0, 0x00, 0x00, 0x00, 0x63, 0x50, 0x4B, 0x43, 0x53, 0x2D, 0x31, 0x35, 0x0C, 0xA0, 0x00, 0x00, 0x00, 0x63, 0x50, 0x4B, 0x43, 0x53, 0x2D, 0x31, 0x35, 0x01, 0x04, 0x3D, 0xC9, 0x3B, 0x00, 0x43, 0x1E, 0x82, 0x02, 0x10, 0x64, 0x91, 0x18, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0xFD, 0x0B, 0x05, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x0B, 0x03, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0xFF, 0xFF, 0xFD, 0x00 };

                apduSize5.Update(apduParam5);

                apduResp = iCard.TransmitLe(apduSize5, 1,true);
                if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                {

                    log.Info(apduResp.ToString());

                    return -3;
                }
                #endregion

                log.Info(apduResp.Status);
                log.Info(apduResp.ToString());
            }

            /*
             * Select Applet 00A40400 [0C] A000000063504B43532D3135 [00] 
             */

            {
                log.Info("00A40400 [0C] A0 00 00 00 63 50 4B 43 53 2D 31 35 [00] ");

                #region 00A40400 [0C] A0 00 00 00 63 50 4B 43 53 2D 31 35 [00] 

                APDUCommand apduSize5 = new APDUCommand(0x00, 0xA4, 0x04, 0x00, null, 0);

                APDUParam apduParam5 = new APDUParam();

                apduParam5.Data = new byte[12] { 0xA0, 0x00, 0x00, 0x00, 0x63, 0x50, 0x4B, 0x43, 0x53, 0x2D, 0x31, 0x35 };

                apduSize5.Update(apduParam5);

                apduResp = iCard.TransmitLe(apduSize5,36);
                if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                {

                    log.Info(apduResp.ToString());

                    return -4;
                }
                #endregion

                log.Info(apduResp.Status);
                log.Info(apduResp.ToString());
            }

            /* GET DATA
             * 80CA0055 [00] 
             */

            //{
            //    log.Info("80CA0055 [00] ");

            //    #region 80CA0055 [00] 

            //    APDUCommand apduSize5 = new APDUCommand(0x80, 0xCA, 0x00, 0x55, null, 0);

            //    apduResp = iCard.TransmitLe(apduSize5);
            //    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
            //    {

            //        log.Info(apduResp.ToString());

            //        return -5;
            //    }
            //    #endregion

            //    log.Info(apduResp.Status);
            //    log.Info(apduResp.ToString());
            //}



            byte[] certificateByte = Encoding.UTF8.GetBytes(certificate);

            string hexValue = certificateByte.Length.ToString("X");

            //byte fileLength  = Convert.ToByte(certificateByte.Length.ToString("X"), 16);

            /*
             * Create File
             */

            //00 E0 00 00 [17] 62|15 <80|02 <00D6>><82|01 <01>><83|02 <0001>><86|02 <060C>><88|01 <08>><8A|01 <05>>

            {
                log.Info("00 E0 00 00 [17] 62|15 <80|02 <00D6>><82|01 <01>><83|02 <0005>><86|02 <060C>><88|01 <08>><8A|01 <05>> ");

                #region 00 E0 00 00 [17] 62|15 <80|02 <00D6>><82|01 <01>><83|02 <0005>><86|02 <060C>><88|01 <08>><8A|01 <05>>

                APDUCommand apduSize5 = new APDUCommand(0x00, 0xE0, 0x00, 0x00, null, 0);

                APDUParam apduParam5 = new APDUParam();

                apduParam5.Data = new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x15, 0xD6, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01 , 0x08, 0x8A, 0x01, 0x05 };

                apduSize5.Update(apduParam5);

                apduResp = iCard.Transmit(apduSize5);
                if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                {

                    log.Info(apduResp.ToString());

                    return -6;
                }
                #endregion

                log.Info(apduResp.Status);
                log.Info(apduResp.ToString());
            }

            /*
            *  Update BINARY
            */

            //00D60000 [1A] CERTIFICATE
            if (certificateByte != null)
                if (InsertBigDataSignature(certificateByte) != 0) { return -46; }


            iCard.Disconnect(DISCONNECT.Reset);

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public int SaveIDL2Card(byte[] DG1, byte[] DG2, byte[] DG3, byte[] DG4, byte[] DG5, byte[] DGCommon)
        {
            log.Info("SaveIDL2Card");

            try
            {
                Connect2Card();


                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0)
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[22] { 0x83, 0x02, 0x20, 0x01, 0x8F, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[22] { 0x83, 0x02, 0x20, 0x03, 0x8F, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0xD6, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x91, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x5D, 0xE9, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -12;
                }


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -13;
                }

                //Create DG11
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[20] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x11, 0x86, 0x02, 0x00, 0x00/*, 0x88, 0x01, 0x11,*/ ,0x8A, 0x01, 0x05 }) != 0)
                {
                    //return -131;
                }

                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -14;
                }


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0) {    return -18;  }

                /*
                 *      # WriteBACKeys
                        # WriteDESKeys
                 */
                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, new byte[44] { 0x70, 0x2A, 0xBF, 0x0A, 0x21, 0x26, 0xA2, 0x24, 0x90, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x91, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }, 0) != 0) { return -18; }

                /*
                 *  # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                 * 
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9 }) != 0) { return -21; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x02, DG2) != 0) { return -43; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x03, DG3) != 0) { return -44; }

                if (DG4 != null)
                    if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x04, DG4) != 0) { return -45; }

                if (DG5 != null)
                    if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, DG5) != 0) { return -46; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, DGCommon) != 0) { return -49; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }
            }
            catch (Exception ex)
            {
                return -101;
            }

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <returns></returns>
        public int SaveIDL2Card2(byte[] DG1, byte[] DG2, byte[] DG3, byte[] DG4, byte[] DG5, byte[] DGCommon, byte[] Kenc, byte[] Kmac)
        {
            log.Info("SaveIDL2Card");

            try
            {
                Connect2Card();


                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0) //
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kenc) != 0) 
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kmac) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0xD6, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x91, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x5D, 0xE9, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -12;
                }


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -13;
                }

                //Create DG11
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[20] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x11, 0x86, 0x02, 0x00, 0x00/*, 0x88, 0x01, 0x11,*/ , 0x8A, 0x01, 0x05 }) != 0)
                {
                    //return -131;
                }

                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -14;
                }


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0) { return -18; }

                /*
                 *      # WriteBACKeys
                        # WriteDESKeys
                 */
                //if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, new byte[44] { 0x70, 0x2A, 0xBF, 0x0A, 0x21, 0x26, 0xA2, 0x24, 0x90, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x91, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }, 0) != 0) { return -18; }

                /*
                 *  # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                 * 
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9 }) != 0) { return -21; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x02, DG2) != 0) { return -43; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x03, DG3) != 0) { return -44; }

                if (DG4 != null)
                    if (InsertBigDataPhoto(DG4) != 0) { return -45; }

                if (DG5 != null)
                    if (InsertBigDataSignature(DG5) != 0) { return -46; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, DGCommon) != 0) { return -49; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }
            }
            catch (Exception ex)
            {

                return -101;
            }

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <param name="Kenc"></param>
        /// <param name="Kmac"></param>
        /// <returns></returns>
        public int SaveIDL2Card3(byte[] DG1, byte[] DG2, byte[] DG3, byte[] DG4, byte[] DG5, byte[] DGCommon, byte[] Kenc, byte[] Kmac)
        {
            log.Info("SaveIDL2Card");

            try
            {
                Connect2Card();


                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x0D, 0x0C, 0xFF, 0xFF, 0x0C, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0) //
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kenc) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kmac) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x10, 0x0C, 0x00, 0xFF, 0xFF, 0x0C, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x10, 0x0C, 0xFF, 0xFF, 0xFF, 0x0C }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x02, 0x58, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x91, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x42, 0x68, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -12;
                }


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x13, 0x88, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -13;
                }

                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    return -14;
                //}


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //End of Create part



                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0) { return -18; }

                /*
                 * # WriteBACKeys
                   # WriteDESKeys
                 */

                List<byte> lk = new List<byte>();
                lk.Add(0x70);
                lk.Add(0x2A);
                lk.Add(0xBF);
                lk.Add(0x0A);
                lk.Add(0x21);
                lk.Add(0x26);
                lk.Add(0xA2);
                lk.Add(0x24);
                lk.Add(0x90);
                lk.Add(0x10);
                lk.AddRange(Kenc);
                lk.Add(0x91);
                lk.Add(0x10);
                lk.AddRange(Kmac);

                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, lk.ToArray(), 0) != 0) { /*return -18;*/ }

                /*
                    # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                    # WriteECCurveComponents
                    # Prime
                    # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -21; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                /*
                 * # Order
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                /*
                 * # Co-Factor
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                /*
                 *# Put Data SM Type
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                /*
                 * 
                    # WriteECPrivateKeyComponents
                    # Private Key Value S
                    # TLVList
                    # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                /*
                 *# SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                /*
                 *# WriteECCurveComponents
                  # Prime
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                /*
                 *# Order
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                /*
                 *# Co-Factor
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                /*
                 *# WriteECPublicKeyComponents
                  # Public Key Value W
                  # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                /*
                 *  # ConcatenateBytes
                    # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                /*
                     # ConcatenateBytes
                     # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }


                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -161; }

                //if (CallApduCommand(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x02, DG2) != 0) { return -43; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x03, DG3) != 0) { return -44; }

                if (DG4 != null)
                    if (InsertBigDataPhoto(DG4) != 0) { return -45; }

                if (DG5 != null)
                    if (InsertBigDataSignature(DG5) != 0) { return -46; }

                List<byte> dg14List = new List<byte>();
                dg14List.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x01, 0x50, 0x6E, 0x82, 0x01, 0x4C, 0x31, 0x82, 0x01, 0x48, 0x30, 0x82, 0x01, 0x44, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x03, 0x01, 0x30, 0x82, 0x01, 0x37, 0x30, 0x82, 0x01, 0x33, 0x30, 0x81, 0xEC, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x30, 0x81, 0xE0, 0x02, 0x01, 0x01, 0x30, 0x2C, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x01, 0x01, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77, 0x30, 0x44, 0x04, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0x04, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6, 0x04, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7, 0x02, 0x01, 0x01, 0x03, 0x42, 0x00, 0x04, 0x25, 0xE7, 0x1F, 0xCC, 0x05, 0x3A, 0x61, 0x5B, 0xF4, 0xF3, 0x74, 0x82, 0xE0, 0xB6, 0x58, 0x8C, 0x99, 0xEC, 0x8C, 0x98, 0x67, 0xD7, 0x7E, 0x4A, 0xE1, 0x0D, 0xF3, 0x99, 0x48, 0xC7, 0x43, 0x3C, 0x7F, 0x12, 0x89, 0x8B, 0x4B, 0x42, 0x13, 0xA5, 0xC3, 0xF4, 0xFE, 0x77, 0x0F, 0x21, 0x91, 0xCB, 0x5C, 0xFA, 0xBF, 0x6B, 0xA7, 0x6B, 0xCB, 0xB4, 0x5C, 0x05, 0x4D, 0x69, 0x3C, 0x6C, 0x00, 0x3F });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x0E, dg14List.ToArray()) != 0) { return -16; }


                List<byte> dgCommon = new List<byte>();

                dgCommon.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x5E, 0x60, 0x5C, 0x5F, 0x01, 0x02, 0x01, 0x00, 0x5C, 0x07, 0x61, 0x6B, 0x6C, 0x65, 0x67, 0x63, 0x6E, 0x86, 0x4C, 0x31, 0x4A, 0x30, 0x48, 0x30, 0x41, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x02, 0x30, 0x36, 0x02, 0x01, 0x0E, 0x06, 0x08, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x01, 0x01, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x03, 0x02, 0x01, 0x03 });

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, DGCommon) != 0) { return -49; }

                List<byte> dgSOD1 = new List<byte>();

                dgSOD1.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x03, 0xF8, 0x77, 0x82, 0x07, 0x01, 0x30, 0x82, 0x06, 0xFD, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x82, 0x06, 0xEE, 0x30, 0x82, 0x06, 0xEA, 0x02, 0x01, 0x03, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x3B, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0xA0, 0x82, 0x01, 0x2F, 0x04, 0x82, 0x01, 0x2B, 0x30, 0x82, 0x01, 0x27, 0x02, 0x01, 0x00, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x11, 0x30, 0x25, 0x02, 0x01, 0x01, 0x04, 0x20, 0xF1, 0xB4, 0x91, 0x15, 0xC4, 0x98, 0x47, 0xF2, 0x52, 0x47, 0xF1, 0x5E, 0x11, 0xF7, 0xD4, 0xB3, 0x54, 0x5A, 0x8D, 0x55, 0x90, 0xB6, 0xDC, 0x94, 0x1B, 0xC5, 0xFF, 0xCF, 0x4E, 0x39, 0xF3, 0x7A, 0x30, 0x25, 0x02, 0x01, 0x02, 0x04, 0x20, 0xEF, 0x7A, 0x16, 0x97, 0x5E, 0x6F, 0xD6, 0xA0, 0x82, 0x80, 0x78, 0x17, 0x63, 0xAF, 0x49, 0xD4, 0x96, 0x16, 0xEC, 0x12, 0x58, 0xEC, 0x29, 0x1C, 0x06, 0x4B, 0x72, 0x6A, 0x8E, 0x30, 0x45, 0xDD, 0x30, 0x25, 0x02, 0x01, 0x03, 0x04, 0x20, 0xE5, 0xEC, 0x03, 0x0B, 0xCA, 0x7C, 0xB6, 0xE1, 0xD1, 0x13, 0x63, 0x36, 0xCE, 0x3C, 0x07, 0xA8, 0x18, 0x02, 0x04, 0x13, 0x86, 0xD0, 0x34, 0x4B, 0x1A, 0xE1, 0xC8, 0xD1, 0x0A, 0x26, 0x8E, 0x4E, 0x30, 0x25, 0x02, 0x01, 0x04, 0x04, 0x20, 0x5E, 0x02, 0xB1, 0x15, 0x6D, 0x54, 0x8B, 0xB8, 0x57, 0xC0, 0x23, 0xBF, 0xFF, 0x8C, 0x95, 0x99, 0xCB, 0x0A, 0x85, 0xF0, 0xF4, 0x3C, 0x00, 0xF1, 0xA7, 0xC6, 0x1E, 0x2A, 0x04, 0x71, 0xD4, 0x12, 0x30, 0x25, 0x02, 0x01, 0x05, 0x04, 0x20, 0x2A, 0x9B, 0x1F, 0x84, 0x1C, 0xAB, 0x5C, 0x7E, 0xBC, 0x53, 0xE4, 0x8B, 0x4B, 0x69, 0xF2, 0x7B, 0xDA, 0x3C, 0xC7, 0x2B, 0x45, 0x47, 0x28, 0x82, 0xE1, 0xCF, 0x86, 0xF2, 0x2A, 0xD4, 0x3D, 0xCD, 0x30, 0x25, 0x02, 0x01, 0x07, 0x04, 0x20, 0x3E, 0x9A, 0x80, 0x47, 0x3C, 0x42, 0xC1, 0x9F, 0x9C, 0x9F, 0x4D, 0x0C, 0xAB, 0x06, 0x9E, 0xB0, 0x1F, 0x24, 0x6C, 0xC4, 0xF5, 0x21, 0x13, 0x7D, 0x5F, 0x34, 0xA0, 0xD9, 0x8F, 0x20, 0xE6, 0x07, 0x30, 0x25, 0x02, 0x01, 0x0E, 0x04, 0x20, 0x01, 0x27, 0xD7, 0x48, 0xFE, 0xF7, 0x9A, 0xFB, 0xA1, 0x5F, 0x3A, 0x17, 0x8B, 0x11, 0x42, 0x3F, 0x85, 0x67, 0x51, 0x6D, 0x4A, 0x0B, 0xF3, 0x2B, 0x9C, 0xA2, 0x8D, 0xE2, 0x65, 0x59, 0x9D, 0x62, 0xA0, 0x82, 0x03, 0x6C, 0x30, 0x82, 0x03, 0x68, 0x30, 0x82, 0x02, 0x50, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x37, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x30, 0x51, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x02, 0x44, 0x53, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xD4, 0x83, 0xCC, 0x47, 0xDF, 0x84, 0x5C, 0xC1, 0xF8, 0xB1, 0x59, 0x68, 0xC7, 0xA2, 0x4F, 0x15, 0xD1, 0x2C, 0xDD, 0xB3, 0x08, 0x73, 0x7F, 0x7A, 0xB1, 0x42, 0x3C, 0xF7, 0xE3, 0x49, 0x12, 0x50, 0xD7, 0xF6, 0xB7, 0xAF, 0x60, 0x85, 0xE0, 0xF6, 0xBE, 0xCA, 0x20, 0xFB, 0xEF, 0xAA, 0x3F, 0x98, 0xD9, 0x0C, 0x4F, 0xED, 0xCB, 0x27, 0xC3, 0x76, 0x81, 0x96, 0xE4, 0x7A, 0xC7, 0x5A, 0x98, 0x15, 0xC4, 0x53, 0xF9, 0xA6, 0xCF, 0xC7, 0xCD, 0xF4, 0x55, 0x15, 0x3B, 0x3A, 0xF0, 0x98, 0x19, 0xCD, 0x89, 0x66, 0x54, 0x19, 0x41, 0x1F, 0xB3, 0xE1, 0xDD, 0xDA, 0x95, 0xD9, 0x05, 0xB1, 0xD6, 0x51, 0x50, 0x71, 0x92, 0x40, 0x81, 0xE7, 0x74, 0x37, 0xF9, 0x5E, 0x40, 0xB6, 0x1A, 0x24, 0x73, 0x6D, 0x50, 0x2F, 0x5C, 0xCF, 0xF4, 0x61, 0x71, 0xFC, 0xEE, 0x41, 0x87, 0xD8, 0x88, 0xBD, 0xBB, 0x27, 0x21, 0x6B, 0x56, 0xA1, 0xAD, 0x19, 0xA2, 0x34, 0x51, 0x51, 0x6C, 0x8B, 0xE4, 0x59, 0x1D, 0xDC, 0x09, 0x8D, 0x28, 0x07, 0xF2, 0x36, 0xAA, 0x89, 0x63, 0x4E, 0x4D, 0x2F, 0x97, 0x21, 0x5E, 0xD1, 0x74, 0x60, 0xC6, 0x0A, 0xBE, 0xF4, 0x7C, 0xB4, 0x05, 0xB7, 0x27, 0x1B, 0xD8, 0x43, 0x84, 0x1C, 0x64, 0xF7, 0xED, 0x24, 0x47, 0x60, 0xEF, 0x11, 0x59, 0x38, 0xB9, 0xC6, 0x13, 0x43, 0xDE, 0xF4, 0x44, 0xE0, 0x35, 0x51, 0x72, 0x49, 0x69, 0x70, 0x55, 0xDD, 0x39, 0xDE, 0xC2, 0xAB, 0x70, 0x7A, 0xBD, 0x1C, 0xE5, 0x2F, 0xFE, 0xB3, 0xAE, 0x86, 0x4E, 0xB7, 0x82, 0xDB, 0x96, 0xEE, 0x7C, 0xE4, 0x0D, 0x2C, 0x6E, 0xB8, 0x22, 0x57, 0x08, 0xCE, 0xCC, 0x61, 0x68, 0x25, 0x1D, 0xEC, 0x5E, 0xE8, 0x05, 0x75, 0xC5, 0xE4, 0xB2, 0x2E, 0x02, 0xEE, 0x95, 0x7C, 0xBC, 0xEC, 0xD2, 0xF7, 0xE0, 0x3B, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x41, 0x30, 0x3F, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xE9, 0xC6, 0x0E, 0x7E, 0x1C, 0x9F, 0x55, 0x3D, 0x1C, 0xD3, 0x55, 0xA2, 0x33, 0xDC, 0x58, 0x73, 0x90, 0xCD, 0x2D, 0xA6, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x31, 0x8F, 0xF7, 0xAF, 0xD8, 0x19, 0x7C, 0xF1, 0x2E, 0x61, 0xC0, 0x5B, 0xF2, 0x7F, 0xA2, 0x64, 0xD1, 0x36, 0xC2, 0x1F, 0x98, 0x3D, 0x14, 0x06, 0x2B, 0x84 } );

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x1D, dgSOD1.ToArray()) != 0) { return -161; }

                List<byte> dgSOD2 = new List<byte>();

                dgSOD2.AddRange(new byte[] { 0x54, 0x02, 0x03, 0xF8, 0x53, 0x82, 0x03, 0x0D, 0x3C, 0x3C, 0x8F, 0x92, 0xC1, 0x46, 0x9F, 0xB3, 0x9E, 0xC0, 0xF9, 0xAC, 0x60, 0xC3, 0x19, 0x6D, 0x4B, 0x4F, 0xD8, 0x43, 0x7B, 0xA7, 0xA7, 0x48, 0x33, 0x34, 0x26, 0xE6, 0x1E, 0x4B, 0xC1, 0xAE, 0xF8, 0x38, 0xA1, 0x6D, 0xEE, 0x03, 0xB7, 0xDF, 0xC0, 0xD4, 0xDE, 0xE8, 0x07, 0x26, 0xFB, 0x44, 0x51, 0x2F, 0x90, 0x7A, 0xA8, 0x6F, 0xCF, 0xA8, 0xA6, 0x42, 0x46, 0x02, 0x85, 0xF0, 0x7E, 0xB1, 0x41, 0xC7, 0xFE, 0xCA, 0xEB, 0x7E, 0xF9, 0xC8, 0x51, 0x31, 0x63, 0x5E, 0x87, 0x22, 0x00, 0xAA, 0x9A, 0x56, 0xAE, 0xD7, 0x41, 0x7C, 0x5C, 0x55, 0x43, 0x39, 0x44, 0xF2, 0x6E, 0xE5, 0x06, 0x5F, 0x19, 0x2E, 0x2E, 0xD9, 0x27, 0xA5, 0x73, 0x02, 0x00, 0x57, 0x4B, 0x1D, 0xE9, 0xC9, 0x64, 0x7A, 0x60, 0xE3, 0xD0, 0x49, 0x55, 0xEC, 0x56, 0x05, 0xBE, 0xC2, 0xB1, 0xF2, 0x31, 0x20, 0x48, 0xDE, 0xB2, 0xCC, 0x40, 0x9C, 0xF4, 0xC6, 0x61, 0xCB, 0xB0, 0x0D, 0x8A, 0x22, 0xB1, 0x69, 0xAA, 0xC5, 0xFF, 0x17, 0x8A, 0x75, 0x28, 0xCF, 0x48, 0xBE, 0x24, 0x99, 0x43, 0x10, 0x39, 0xE2, 0xF6, 0x4B, 0xCC, 0xF3, 0xF2, 0xF9, 0x32, 0x24, 0xD7, 0x1A, 0x6E, 0x58, 0x95, 0x9C, 0x19, 0x5F, 0xCD, 0x1B, 0x53, 0xCF, 0xE0, 0xD7, 0x11, 0xC1, 0x7F, 0x0F, 0x0C, 0xAC, 0x09, 0xB0, 0x3E, 0x15, 0x76, 0xFA, 0x86, 0xDD, 0x7D, 0xB1, 0x6E, 0xB8, 0x36, 0xA3, 0x48, 0x31, 0x5D, 0x23, 0xE3, 0xAA, 0xC8, 0x54, 0x59, 0x00, 0x97, 0x25, 0xA6, 0x02, 0x7F, 0xA3, 0x25, 0xFC, 0xDD, 0x43, 0x99, 0xF0, 0x78, 0xFC, 0x14, 0xCC, 0xA2, 0xB5, 0xB7, 0xBF, 0x31, 0x82, 0x02, 0x23, 0x30, 0x82, 0x02, 0x1F, 0x02, 0x01, 0x01, 0x30, 0x60, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA0, 0x81, 0x95, 0x30, 0x15, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x03, 0x31, 0x08, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0x30, 0x1C, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x05, 0x31, 0x0F, 0x17, 0x0D, 0x31, 0x37, 0x30, 0x36, 0x32, 0x39, 0x30, 0x37, 0x32, 0x30, 0x33, 0x39, 0x5A, 0x30, 0x2D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x34, 0x31, 0x20, 0x30, 0x1E, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA1, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x30, 0x2F, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x04, 0x31, 0x22, 0x04, 0x20, 0xA8, 0xDB, 0x0F, 0x33, 0x29, 0x1F, 0x3A, 0x2B, 0x29, 0xB8, 0x02, 0xA5, 0xCD, 0xA2, 0x39, 0xFB, 0x38, 0x26, 0x01, 0x0B, 0xA6, 0x2E, 0x93, 0x06, 0x90, 0xB2, 0xA1, 0x05, 0x2C, 0x08, 0x2C, 0x93, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x01, 0x00, 0xC6, 0x76, 0x3B, 0x16, 0xC3, 0xD3, 0x34, 0x38, 0xCB, 0x1E, 0x1D, 0x3A, 0xD9, 0x95, 0x35, 0xDD, 0x85, 0x16, 0x34, 0x51, 0x98, 0x9A, 0xD6, 0x31, 0x61, 0xBF, 0x35, 0x59, 0xB8, 0x42, 0x68, 0x60, 0x40, 0xD3, 0x72, 0xDC, 0x06, 0xAC, 0x62, 0x47, 0xDF, 0xCC, 0xC4, 0x9F, 0xC9, 0x7E, 0xED, 0x41, 0x4A, 0x30, 0x68, 0x57, 0x6E, 0x70, 0x63, 0xC9, 0x7C, 0xA3, 0x89, 0x63, 0x0C, 0x15, 0x63, 0xA8, 0xE8, 0x1F, 0x9C, 0x48, 0xD1, 0x0B, 0x0F, 0x11, 0xE9, 0x80, 0x79, 0xF2, 0x6E, 0xE4, 0x8C, 0x36, 0xBE, 0xD1, 0xE1, 0xB0, 0x32, 0xA3, 0x8C, 0x07, 0x1C, 0x63, 0x4D, 0xD7, 0x68, 0x42, 0x75, 0x65, 0xDA, 0xF9, 0x2B, 0xE0, 0xE4, 0xFE, 0x98, 0x8D, 0x99, 0xAC, 0xD7, 0x48, 0xBB, 0x28, 0xD8, 0x2E, 0xD2, 0x71, 0x41, 0xAD, 0xDF, 0x39, 0xF8, 0xC4, 0xF9, 0xC5, 0xDE, 0xA9, 0xED, 0x84, 0x1F, 0x44, 0x64, 0x8E, 0x22, 0xBF, 0x31, 0xB1, 0x29, 0x59, 0x4D, 0xD8, 0x9D, 0x5B, 0xF2, 0x16, 0x6D, 0x97, 0xEB, 0x84, 0x9D, 0xAA, 0x44, 0x02, 0x2C, 0x8E, 0x49, 0x3F, 0xB9, 0x30, 0x04, 0x72, 0x2E, 0xCE, 0x69, 0x84, 0x8A, 0xA7, 0x42, 0x65, 0xC8, 0x7E, 0x7B, 0x63, 0x06, 0x8A, 0x76, 0x73, 0x4D, 0xE6, 0x43, 0x20, 0xF0, 0x35, 0x09, 0x53, 0x72, 0x3C, 0x60, 0xD1, 0x33, 0x66, 0x71, 0xF3, 0xF2, 0x8D, 0xB9, 0x69, 0x30, 0x83, 0x0E, 0x83, 0xDC, 0x4C, 0xC4, 0xB9, 0x3B, 0x29, 0xA2, 0xEC, 0xF2, 0x1D, 0xCC, 0xD2, 0x4F, 0xCD, 0xE0, 0x54, 0x59, 0x6B, 0xA3, 0xFA, 0xE7, 0x80, 0x6B, 0x3A, 0xD8, 0x94, 0x7D, 0x39, 0x4C, 0x6F, 0xA8, 0x33, 0xAD, 0x21, 0x33, 0x63, 0xE2, 0xCB, 0x5E, 0xBB, 0xD1, 0x35, 0x1A, 0x72, 0xE5, 0xE5, 0x3F, 0x10, 0xDF, 0x2F, 0x7C, 0xC1, 0x6C, 0x4B, 0x1C, 0x55, 0x25, 0x77 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x1D, dgSOD2.ToArray()) != 0) { return -162; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }
            }
            catch (Exception ex)
            {

                return -101;
            }

            return 0;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <returns></returns>
        public int SaveIDL2Card4(byte[] DG1, byte[] DG2, byte[] DG3, byte[] DG4, byte[] DG5, byte[] DGCommon, byte[] Kenc, byte[] Kmac)
        {
            log.Info("SaveIDL2Card");

            try
            {
                Connect2Card();


                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x01 }, 28) != 0)
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0) //
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kenc) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kmac) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0xD6, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x91, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x42, 0x68, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -12;
                }


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x13, 0x88, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -13;
                }

                //Create DG11
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[20] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x11, 0x86, 0x02, 0x00, 0x00/*, 0x88, 0x01, 0x11,*/ , 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    //return -131;
                //}

                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    return -14;
                //}


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x01 }, 28) != 0) { return -18; }

                /*
                 *      # WriteBACKeys
                        # WriteDESKeys
                 */
                //if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, new byte[44] { 0x70, 0x2A, 0xBF, 0x0A, 0x21, 0x26, 0xA2, 0x24, 0x90, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x91, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }, 0) != 0) { return -18; }

                /*
                 *  # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                 * 
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9 }) != 0) { return -21; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x02, DG2) != 0) { return -43; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x03, DG3) != 0) { return -44; }

                if (DG4 != null)
                    if (InsertBigDataPhoto(DG4) != 0) { return -45; }

                if (DG5 != null)
                    if (InsertBigDataSignature(DG5) != 0) { return -46; }

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, DGCommon) != 0) { return -49; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }
            }
            catch (Exception ex)
            {

                return -101;
            }

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <param name="Kenc"></param>
        /// <param name="Kmac"></param>
        /// <returns></returns>
        public int SaveIDL2Card5(byte[] DG1, byte[] DG2, byte[] DG3, byte[] DG4, byte[] DG5, byte[] DGCommon, byte[] Kenc, byte[] Kmac)
        {
            log.Info("SaveIDL2Card");

            try
            {
                Connect2Card();


                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x0D, 0x0C, 0xFF, 0xFF, 0x0C, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0) //
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kenc) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kmac) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }



                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0xD6, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }

                //Write DG1
                if (CallApduCommand(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }



                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x91, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                //Write DG2
                if (CallApduCommand(0x00, 0xD7, 0x00, 0x02, DG2) != 0) { return -43; }


                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }

                //Write DG3
                if (CallApduCommand(0x00, 0xD7, 0x00, 0x03, DG3) != 0) { return -44; }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x42, 0x68, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -12;
                }

                //Write DG4
                if (DG4 != null)
                    if (InsertBigDataPhoto(DG4) != 0) { return -45; }

                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x13, 0x88, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -13;
                }

                //Write DG5
                if (DG5 != null)
                    if (InsertBigDataSignature(DG5) != 0) { return -46; }

                /*
                 * [DEBUG] processingStep .GenerateECKey
                   [INFO] GenerateECKey  - for Active Authentication (AA) {
                   [INFO] }
                   [DEBUG] processingStep .WriteECKey
                   [INFO] WriteECKey  - for Active Authentication (AA) {
                   [TRACE] YgraineLoggerChannel(SmartCardIOChannel) sends: 
                 */
                                        //                                 62      13    80    02    01    00    82    02    10    59    83    02    10    70    86    02    06    0C    9E    01    00 
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[] { 0x62, 0x13, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x10, 0x70, 0x86, 0x02, 0x06, 0x0C, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -61;
                }

                //80 DA 01 6E [26] 83 02 21 01 8F 20 FF FF FF FF 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }) != 0)
                {
                    return -62;
                }


                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC }) != 0)
                {
                    return -63;
                }


                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7, 0xB3, 0xEB, 0xBD, 0x55, 0x76, 0x98, 0x86, 0xBC, 0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6, 0x3B, 0xCE, 0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B }) != 0)
                {
                    return -64;
                }


                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47, 0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2, 0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0, 0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96, 0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B, 0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16, 0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE, 0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5 }) != 0)
                {
                    return -65;
                }


                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBC, 0xE6, 0xFA, 0xAD, 0xA7, 0x17, 0x9E, 0x84, 0xF3, 0xB9, 0xCA, 0xC2, 0xFC, 0x63, 0x25, 0x51 }) != 0)
                {
                    return -66;
                }


                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0)
                {
                    return -67;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0)
                {
                    return -68;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x54, 0x5A, 0xF8, 0xD2, 0xBB, 0x8C, 0x62, 0x98, 0x73, 0x85, 0xCE, 0x40, 0xBE, 0x87, 0x91, 0x21, 0x0B, 0x91, 0xF4, 0x92, 0x7E, 0x78, 0xB3, 0x99, 0x3D, 0x56, 0x74, 0x7E, 0x91, 0xC2, 0x53, 0xAB }) != 0)
                {
                    return -69;
                }


                //WriteISO18013DG

                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x3B, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0D, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x68, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -70;
                }


                List<byte> dg0D = new List<byte>();

                dg0D.AddRange(new byte[] {  0x6F, 0x82, 0x01, 0x37, 0x30, 0x82, 0x01, 0x33, 0x30, 0x81, 0xEC, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x30, 0x81, 0xE0, 0x02, 0x01, 0x01, 0x30, 0x2C, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x01, 0x01, 0x02, 0x21, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x30, 0x44, 0x04, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x04, 0x20, 0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7, 0xB3, 0xEB, 0xBD, 0x55, 0x76, 0x98, 0x86, 0xBC, 0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6, 0x3B, 0xCE, 0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B, 0x04, 0x41, 0x04, 0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47, 0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2, 0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0, 0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96, 0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B, 0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16, 0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE, 0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5, 0x02, 0x21, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBC, 0xE6, 0xFA, 0xAD, 0xA7, 0x17, 0x9E, 0x84, 0xF3, 0xB9, 0xCA, 0xC2, 0xFC, 0x63, 0x25, 0x51, 0x02, 0x01, 0x01, 0x03, 0x42, 0x00, 0x04, 0xDE, 0xE8, 0xF6, 0x69, 0x0D, 0xE5, 0xCD, 0x83, 0x6B, 0x66, 0x93, 0xF3, 0x37, 0xA4, 0x3C, 0x9F, 0x41, 0x9E, 0x6C, 0x00, 0xA8, 0xEC, 0xCE, 0x21, 0xFB, 0x8F, 0x0B, 0xE9, 0xB9, 0x1F, 0x7D, 0x13, 0xB3, 0xA0, 0x9E, 0xC7, 0x1E, 0x6C, 0x1F, 0x62, 0xCA, 0xDD, 0x2E, 0x53, 0xA9, 0xD1, 0xB4, 0xFB, 0x88, 0x62, 0xA4, 0x76, 0x96, 0x25, 0xBB, 0xA1, 0x33, 0x4B, 0x4C, 0x6C, 0x70, 0xAD, 0xB6, 0xCA });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x0D, dg0D.ToArray()) != 0) { return -71; }



                /////// for Chip Authentication (CA)

                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[] {  0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x06, 0x0C, 0x0D, 0xFF, 0xFF, 0x0C, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -611;
                }

                

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0)
                {
                    return -621;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9 }) != 0)
                {
                    return -631;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x00, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0)
                {
                    return -641;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0)
                {
                    return -651;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0)
                {
                    return -661;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0)
                {
                    return -671;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0)
                {
                    return -681;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x8A, 0xC7, 0xCA, 0x07, 0x8E, 0xD0, 0x10, 0xBF, 0xF0, 0x5D, 0xBD, 0x1C, 0x4B, 0x9B, 0xD5, 0xEE, 0xA4, 0xB3, 0xBB, 0xC0, 0xCD, 0x39, 0x05, 0x23, 0x72, 0x89, 0xE1, 0x9E, 0x76, 0x66, 0xA3, 0x2D }) != 0)
                {
                    return -691;
                }


                /*
                 * [DEBUG] processingStep .WriteCVCACert
                   [INFO] WriteCVCACert  {
                   [INFO] WriteKey  {
                   [INFO] WriteECKey  {
                 */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[] { 0x62, 0x14, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x0C }) != 0)
                {
                    return -6111;
                }



                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }) != 0)
                {
                    return -6211;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC }) != 0)
                {
                    return -6311;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7, 0xB3, 0xEB, 0xBD, 0x55, 0x76, 0x98, 0x86, 0xBC, 0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6, 0x3B, 0xCE, 0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B }) != 0)
                {
                    return -6411;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47, 0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2, 0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0, 0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96, 0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B, 0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16, 0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE, 0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5 }) != 0)
                {
                    return -6511;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBC, 0xE6, 0xFA, 0xAD, 0xA7, 0x17, 0x9E, 0x84, 0xF3, 0xB9, 0xCA, 0xC2, 0xFC, 0x63, 0x25, 0x51 }) != 0)
                {
                    return -6611;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0)
                {
                    return -6711;
                }

                
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[] {  0x83, 0x02, 0x27, 0x01, 0x8F, 0x41, 0x04, 0xF2, 0x9C, 0x53, 0x1B, 0x2E, 0xC3, 0xD9, 0x8E, 0xF4, 0x99, 0xD0, 0xAB, 0x64, 0x48, 0x01, 0x24, 0x46, 0x64, 0x36, 0x6A, 0x58, 0x1C, 0x2D, 0x06, 0xC4, 0x68, 0x81, 0x7C, 0x6B, 0x89, 0x2E, 0x95, 0x15, 0xDA, 0xD4, 0x2A, 0x1E, 0xF5, 0x33, 0x81, 0x25, 0xB5, 0x3E, 0x6C, 0xA6, 0x79, 0x7B, 0x70, 0x16, 0x61, 0x53, 0xD1, 0x8A, 0xC0, 0xDE, 0xC2, 0xBF, 0xE6, 0x99, 0xC4, 0x76, 0xAE, 0x98, 0x27 }) != 0)
                {
                    return -6811;
                }



                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[] { 0xDF, 0xB0 }) != 0)
                {
                    return -1711;
                }

                
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[] { 0xDF, 0xBB, 0x21 }) != 0)
                {
                    return -1712;
                }

               
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[] {  0xDF, 0xB9, 0x49, 0x44, 0x4C, 0x52, 0x4F, 0x4F, 0x54, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0)
                {
                    return -1715;
                }


                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0)
                {
                    return -1715;
                }


                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[] {  0xDF, 0xBD, 0x02, 0x00, 0x00, 0x01, 0x00, 0x01 }) != 0)
                {
                    return -1716;
                }


                //new


                /////////////////////////////////////////////////////////////////////////////////////

                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    return -14;
                //}


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                ////ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                ///*
                // *  # Create IDL COM
                //    # CreateFile
                // */
                ////ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                ////ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //End of Create part














                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x10, 0x0C, 0xFF, 0xFF, 0xFF, 0x0C }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }


                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0) { return -18; }

                /*
                 * # WriteBACKeys
                   # WriteDESKeys
                 */

                List<byte> lk = new List<byte>();
                lk.Add(0x70);
                lk.Add(0x2A);
                lk.Add(0xBF);
                lk.Add(0x0A);
                lk.Add(0x21);
                lk.Add(0x26);
                lk.Add(0xA2);
                lk.Add(0x24);
                lk.Add(0x90);
                lk.Add(0x10);
                lk.AddRange(Kenc);
                lk.Add(0x91);
                lk.Add(0x10);
                lk.AddRange(Kmac);

                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, lk.ToArray(), 0) != 0) { /*return -18;*/ }

                /*
                    # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                    # WriteECCurveComponents
                    # Prime
                    # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -21; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                /*
                 * # Order
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                /*
                 * # Co-Factor
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                /*
                 *# Put Data SM Type
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                /*
                 * 
                    # WriteECPrivateKeyComponents
                    # Private Key Value S
                    # TLVList
                    # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                /*
                 *# SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                /*
                 *# WriteECCurveComponents
                  # Prime
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                /*
                 *# Order
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                /*
                 *# Co-Factor
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                /*
                 *# WriteECPublicKeyComponents
                  # Public Key Value W
                  # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                /*
                 *  # ConcatenateBytes
                    # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                /*
                     # ConcatenateBytes
                     # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }














                List<byte> dg14List = new List<byte>();
                dg14List.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x01, 0x50, 0x6E, 0x82, 0x01, 0x4C, 0x31, 0x82, 0x01, 0x48, 0x30, 0x82, 0x01, 0x44, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x03, 0x01, 0x30, 0x82, 0x01, 0x37, 0x30, 0x82, 0x01, 0x33, 0x30, 0x81, 0xEC, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x30, 0x81, 0xE0, 0x02, 0x01, 0x01, 0x30, 0x2C, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x01, 0x01, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77, 0x30, 0x44, 0x04, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0x04, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6, 0x04, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7, 0x02, 0x01, 0x01, 0x03, 0x42, 0x00, 0x04, 0x25, 0xE7, 0x1F, 0xCC, 0x05, 0x3A, 0x61, 0x5B, 0xF4, 0xF3, 0x74, 0x82, 0xE0, 0xB6, 0x58, 0x8C, 0x99, 0xEC, 0x8C, 0x98, 0x67, 0xD7, 0x7E, 0x4A, 0xE1, 0x0D, 0xF3, 0x99, 0x48, 0xC7, 0x43, 0x3C, 0x7F, 0x12, 0x89, 0x8B, 0x4B, 0x42, 0x13, 0xA5, 0xC3, 0xF4, 0xFE, 0x77, 0x0F, 0x21, 0x91, 0xCB, 0x5C, 0xFA, 0xBF, 0x6B, 0xA7, 0x6B, 0xCB, 0xB4, 0x5C, 0x05, 0x4D, 0x69, 0x3C, 0x6C, 0x00, 0x3F });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, dg14List.ToArray()) != 0) { return -16; }


                List<byte> dgCommon = new List<byte>();

                dgCommon.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x5E, 0x60, 0x5C, 0x5F, 0x01, 0x02, 0x01, 0x00, 0x5C, 0x07, 0x61, 0x6B, 0x6C, 0x65, 0x67, 0x63, 0x6E, 0x86, 0x4C, 0x31, 0x4A, 0x30, 0x48, 0x30, 0x41, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x02, 0x30, 0x36, 0x02, 0x01, 0x0E, 0x06, 0x08, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x01, 0x01, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x03, 0x02, 0x01, 0x03 });

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, DGCommon) != 0) { return -49; }

                List<byte> dgSOD1 = new List<byte>();

                dgSOD1.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x03, 0xF8, 0x77, 0x82, 0x07, 0x01, 0x30, 0x82, 0x06, 0xFD, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x82, 0x06, 0xEE, 0x30, 0x82, 0x06, 0xEA, 0x02, 0x01, 0x03, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x3B, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0xA0, 0x82, 0x01, 0x2F, 0x04, 0x82, 0x01, 0x2B, 0x30, 0x82, 0x01, 0x27, 0x02, 0x01, 0x00, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x11, 0x30, 0x25, 0x02, 0x01, 0x01, 0x04, 0x20, 0xF1, 0xB4, 0x91, 0x15, 0xC4, 0x98, 0x47, 0xF2, 0x52, 0x47, 0xF1, 0x5E, 0x11, 0xF7, 0xD4, 0xB3, 0x54, 0x5A, 0x8D, 0x55, 0x90, 0xB6, 0xDC, 0x94, 0x1B, 0xC5, 0xFF, 0xCF, 0x4E, 0x39, 0xF3, 0x7A, 0x30, 0x25, 0x02, 0x01, 0x02, 0x04, 0x20, 0xEF, 0x7A, 0x16, 0x97, 0x5E, 0x6F, 0xD6, 0xA0, 0x82, 0x80, 0x78, 0x17, 0x63, 0xAF, 0x49, 0xD4, 0x96, 0x16, 0xEC, 0x12, 0x58, 0xEC, 0x29, 0x1C, 0x06, 0x4B, 0x72, 0x6A, 0x8E, 0x30, 0x45, 0xDD, 0x30, 0x25, 0x02, 0x01, 0x03, 0x04, 0x20, 0xE5, 0xEC, 0x03, 0x0B, 0xCA, 0x7C, 0xB6, 0xE1, 0xD1, 0x13, 0x63, 0x36, 0xCE, 0x3C, 0x07, 0xA8, 0x18, 0x02, 0x04, 0x13, 0x86, 0xD0, 0x34, 0x4B, 0x1A, 0xE1, 0xC8, 0xD1, 0x0A, 0x26, 0x8E, 0x4E, 0x30, 0x25, 0x02, 0x01, 0x04, 0x04, 0x20, 0x5E, 0x02, 0xB1, 0x15, 0x6D, 0x54, 0x8B, 0xB8, 0x57, 0xC0, 0x23, 0xBF, 0xFF, 0x8C, 0x95, 0x99, 0xCB, 0x0A, 0x85, 0xF0, 0xF4, 0x3C, 0x00, 0xF1, 0xA7, 0xC6, 0x1E, 0x2A, 0x04, 0x71, 0xD4, 0x12, 0x30, 0x25, 0x02, 0x01, 0x05, 0x04, 0x20, 0x2A, 0x9B, 0x1F, 0x84, 0x1C, 0xAB, 0x5C, 0x7E, 0xBC, 0x53, 0xE4, 0x8B, 0x4B, 0x69, 0xF2, 0x7B, 0xDA, 0x3C, 0xC7, 0x2B, 0x45, 0x47, 0x28, 0x82, 0xE1, 0xCF, 0x86, 0xF2, 0x2A, 0xD4, 0x3D, 0xCD, 0x30, 0x25, 0x02, 0x01, 0x07, 0x04, 0x20, 0x3E, 0x9A, 0x80, 0x47, 0x3C, 0x42, 0xC1, 0x9F, 0x9C, 0x9F, 0x4D, 0x0C, 0xAB, 0x06, 0x9E, 0xB0, 0x1F, 0x24, 0x6C, 0xC4, 0xF5, 0x21, 0x13, 0x7D, 0x5F, 0x34, 0xA0, 0xD9, 0x8F, 0x20, 0xE6, 0x07, 0x30, 0x25, 0x02, 0x01, 0x0E, 0x04, 0x20, 0x01, 0x27, 0xD7, 0x48, 0xFE, 0xF7, 0x9A, 0xFB, 0xA1, 0x5F, 0x3A, 0x17, 0x8B, 0x11, 0x42, 0x3F, 0x85, 0x67, 0x51, 0x6D, 0x4A, 0x0B, 0xF3, 0x2B, 0x9C, 0xA2, 0x8D, 0xE2, 0x65, 0x59, 0x9D, 0x62, 0xA0, 0x82, 0x03, 0x6C, 0x30, 0x82, 0x03, 0x68, 0x30, 0x82, 0x02, 0x50, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x37, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x30, 0x51, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x02, 0x44, 0x53, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xD4, 0x83, 0xCC, 0x47, 0xDF, 0x84, 0x5C, 0xC1, 0xF8, 0xB1, 0x59, 0x68, 0xC7, 0xA2, 0x4F, 0x15, 0xD1, 0x2C, 0xDD, 0xB3, 0x08, 0x73, 0x7F, 0x7A, 0xB1, 0x42, 0x3C, 0xF7, 0xE3, 0x49, 0x12, 0x50, 0xD7, 0xF6, 0xB7, 0xAF, 0x60, 0x85, 0xE0, 0xF6, 0xBE, 0xCA, 0x20, 0xFB, 0xEF, 0xAA, 0x3F, 0x98, 0xD9, 0x0C, 0x4F, 0xED, 0xCB, 0x27, 0xC3, 0x76, 0x81, 0x96, 0xE4, 0x7A, 0xC7, 0x5A, 0x98, 0x15, 0xC4, 0x53, 0xF9, 0xA6, 0xCF, 0xC7, 0xCD, 0xF4, 0x55, 0x15, 0x3B, 0x3A, 0xF0, 0x98, 0x19, 0xCD, 0x89, 0x66, 0x54, 0x19, 0x41, 0x1F, 0xB3, 0xE1, 0xDD, 0xDA, 0x95, 0xD9, 0x05, 0xB1, 0xD6, 0x51, 0x50, 0x71, 0x92, 0x40, 0x81, 0xE7, 0x74, 0x37, 0xF9, 0x5E, 0x40, 0xB6, 0x1A, 0x24, 0x73, 0x6D, 0x50, 0x2F, 0x5C, 0xCF, 0xF4, 0x61, 0x71, 0xFC, 0xEE, 0x41, 0x87, 0xD8, 0x88, 0xBD, 0xBB, 0x27, 0x21, 0x6B, 0x56, 0xA1, 0xAD, 0x19, 0xA2, 0x34, 0x51, 0x51, 0x6C, 0x8B, 0xE4, 0x59, 0x1D, 0xDC, 0x09, 0x8D, 0x28, 0x07, 0xF2, 0x36, 0xAA, 0x89, 0x63, 0x4E, 0x4D, 0x2F, 0x97, 0x21, 0x5E, 0xD1, 0x74, 0x60, 0xC6, 0x0A, 0xBE, 0xF4, 0x7C, 0xB4, 0x05, 0xB7, 0x27, 0x1B, 0xD8, 0x43, 0x84, 0x1C, 0x64, 0xF7, 0xED, 0x24, 0x47, 0x60, 0xEF, 0x11, 0x59, 0x38, 0xB9, 0xC6, 0x13, 0x43, 0xDE, 0xF4, 0x44, 0xE0, 0x35, 0x51, 0x72, 0x49, 0x69, 0x70, 0x55, 0xDD, 0x39, 0xDE, 0xC2, 0xAB, 0x70, 0x7A, 0xBD, 0x1C, 0xE5, 0x2F, 0xFE, 0xB3, 0xAE, 0x86, 0x4E, 0xB7, 0x82, 0xDB, 0x96, 0xEE, 0x7C, 0xE4, 0x0D, 0x2C, 0x6E, 0xB8, 0x22, 0x57, 0x08, 0xCE, 0xCC, 0x61, 0x68, 0x25, 0x1D, 0xEC, 0x5E, 0xE8, 0x05, 0x75, 0xC5, 0xE4, 0xB2, 0x2E, 0x02, 0xEE, 0x95, 0x7C, 0xBC, 0xEC, 0xD2, 0xF7, 0xE0, 0x3B, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x41, 0x30, 0x3F, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xE9, 0xC6, 0x0E, 0x7E, 0x1C, 0x9F, 0x55, 0x3D, 0x1C, 0xD3, 0x55, 0xA2, 0x33, 0xDC, 0x58, 0x73, 0x90, 0xCD, 0x2D, 0xA6, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x31, 0x8F, 0xF7, 0xAF, 0xD8, 0x19, 0x7C, 0xF1, 0x2E, 0x61, 0xC0, 0x5B, 0xF2, 0x7F, 0xA2, 0x64, 0xD1, 0x36, 0xC2, 0x1F, 0x98, 0x3D, 0x14, 0x06, 0x2B, 0x84 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, dgSOD1.ToArray()) != 0) { return -161; }

                List<byte> dgSOD2 = new List<byte>();

                dgSOD2.AddRange(new byte[] { 0x54, 0x02, 0x03, 0xF8, 0x53, 0x82, 0x03, 0x0D, 0x3C, 0x3C, 0x8F, 0x92, 0xC1, 0x46, 0x9F, 0xB3, 0x9E, 0xC0, 0xF9, 0xAC, 0x60, 0xC3, 0x19, 0x6D, 0x4B, 0x4F, 0xD8, 0x43, 0x7B, 0xA7, 0xA7, 0x48, 0x33, 0x34, 0x26, 0xE6, 0x1E, 0x4B, 0xC1, 0xAE, 0xF8, 0x38, 0xA1, 0x6D, 0xEE, 0x03, 0xB7, 0xDF, 0xC0, 0xD4, 0xDE, 0xE8, 0x07, 0x26, 0xFB, 0x44, 0x51, 0x2F, 0x90, 0x7A, 0xA8, 0x6F, 0xCF, 0xA8, 0xA6, 0x42, 0x46, 0x02, 0x85, 0xF0, 0x7E, 0xB1, 0x41, 0xC7, 0xFE, 0xCA, 0xEB, 0x7E, 0xF9, 0xC8, 0x51, 0x31, 0x63, 0x5E, 0x87, 0x22, 0x00, 0xAA, 0x9A, 0x56, 0xAE, 0xD7, 0x41, 0x7C, 0x5C, 0x55, 0x43, 0x39, 0x44, 0xF2, 0x6E, 0xE5, 0x06, 0x5F, 0x19, 0x2E, 0x2E, 0xD9, 0x27, 0xA5, 0x73, 0x02, 0x00, 0x57, 0x4B, 0x1D, 0xE9, 0xC9, 0x64, 0x7A, 0x60, 0xE3, 0xD0, 0x49, 0x55, 0xEC, 0x56, 0x05, 0xBE, 0xC2, 0xB1, 0xF2, 0x31, 0x20, 0x48, 0xDE, 0xB2, 0xCC, 0x40, 0x9C, 0xF4, 0xC6, 0x61, 0xCB, 0xB0, 0x0D, 0x8A, 0x22, 0xB1, 0x69, 0xAA, 0xC5, 0xFF, 0x17, 0x8A, 0x75, 0x28, 0xCF, 0x48, 0xBE, 0x24, 0x99, 0x43, 0x10, 0x39, 0xE2, 0xF6, 0x4B, 0xCC, 0xF3, 0xF2, 0xF9, 0x32, 0x24, 0xD7, 0x1A, 0x6E, 0x58, 0x95, 0x9C, 0x19, 0x5F, 0xCD, 0x1B, 0x53, 0xCF, 0xE0, 0xD7, 0x11, 0xC1, 0x7F, 0x0F, 0x0C, 0xAC, 0x09, 0xB0, 0x3E, 0x15, 0x76, 0xFA, 0x86, 0xDD, 0x7D, 0xB1, 0x6E, 0xB8, 0x36, 0xA3, 0x48, 0x31, 0x5D, 0x23, 0xE3, 0xAA, 0xC8, 0x54, 0x59, 0x00, 0x97, 0x25, 0xA6, 0x02, 0x7F, 0xA3, 0x25, 0xFC, 0xDD, 0x43, 0x99, 0xF0, 0x78, 0xFC, 0x14, 0xCC, 0xA2, 0xB5, 0xB7, 0xBF, 0x31, 0x82, 0x02, 0x23, 0x30, 0x82, 0x02, 0x1F, 0x02, 0x01, 0x01, 0x30, 0x60, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA0, 0x81, 0x95, 0x30, 0x15, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x03, 0x31, 0x08, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0x30, 0x1C, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x05, 0x31, 0x0F, 0x17, 0x0D, 0x31, 0x37, 0x30, 0x36, 0x32, 0x39, 0x30, 0x37, 0x32, 0x30, 0x33, 0x39, 0x5A, 0x30, 0x2D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x34, 0x31, 0x20, 0x30, 0x1E, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA1, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x30, 0x2F, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x04, 0x31, 0x22, 0x04, 0x20, 0xA8, 0xDB, 0x0F, 0x33, 0x29, 0x1F, 0x3A, 0x2B, 0x29, 0xB8, 0x02, 0xA5, 0xCD, 0xA2, 0x39, 0xFB, 0x38, 0x26, 0x01, 0x0B, 0xA6, 0x2E, 0x93, 0x06, 0x90, 0xB2, 0xA1, 0x05, 0x2C, 0x08, 0x2C, 0x93, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x01, 0x00, 0xC6, 0x76, 0x3B, 0x16, 0xC3, 0xD3, 0x34, 0x38, 0xCB, 0x1E, 0x1D, 0x3A, 0xD9, 0x95, 0x35, 0xDD, 0x85, 0x16, 0x34, 0x51, 0x98, 0x9A, 0xD6, 0x31, 0x61, 0xBF, 0x35, 0x59, 0xB8, 0x42, 0x68, 0x60, 0x40, 0xD3, 0x72, 0xDC, 0x06, 0xAC, 0x62, 0x47, 0xDF, 0xCC, 0xC4, 0x9F, 0xC9, 0x7E, 0xED, 0x41, 0x4A, 0x30, 0x68, 0x57, 0x6E, 0x70, 0x63, 0xC9, 0x7C, 0xA3, 0x89, 0x63, 0x0C, 0x15, 0x63, 0xA8, 0xE8, 0x1F, 0x9C, 0x48, 0xD1, 0x0B, 0x0F, 0x11, 0xE9, 0x80, 0x79, 0xF2, 0x6E, 0xE4, 0x8C, 0x36, 0xBE, 0xD1, 0xE1, 0xB0, 0x32, 0xA3, 0x8C, 0x07, 0x1C, 0x63, 0x4D, 0xD7, 0x68, 0x42, 0x75, 0x65, 0xDA, 0xF9, 0x2B, 0xE0, 0xE4, 0xFE, 0x98, 0x8D, 0x99, 0xAC, 0xD7, 0x48, 0xBB, 0x28, 0xD8, 0x2E, 0xD2, 0x71, 0x41, 0xAD, 0xDF, 0x39, 0xF8, 0xC4, 0xF9, 0xC5, 0xDE, 0xA9, 0xED, 0x84, 0x1F, 0x44, 0x64, 0x8E, 0x22, 0xBF, 0x31, 0xB1, 0x29, 0x59, 0x4D, 0xD8, 0x9D, 0x5B, 0xF2, 0x16, 0x6D, 0x97, 0xEB, 0x84, 0x9D, 0xAA, 0x44, 0x02, 0x2C, 0x8E, 0x49, 0x3F, 0xB9, 0x30, 0x04, 0x72, 0x2E, 0xCE, 0x69, 0x84, 0x8A, 0xA7, 0x42, 0x65, 0xC8, 0x7E, 0x7B, 0x63, 0x06, 0x8A, 0x76, 0x73, 0x4D, 0xE6, 0x43, 0x20, 0xF0, 0x35, 0x09, 0x53, 0x72, 0x3C, 0x60, 0xD1, 0x33, 0x66, 0x71, 0xF3, 0xF2, 0x8D, 0xB9, 0x69, 0x30, 0x83, 0x0E, 0x83, 0xDC, 0x4C, 0xC4, 0xB9, 0x3B, 0x29, 0xA2, 0xEC, 0xF2, 0x1D, 0xCC, 0xD2, 0x4F, 0xCD, 0xE0, 0x54, 0x59, 0x6B, 0xA3, 0xFA, 0xE7, 0x80, 0x6B, 0x3A, 0xD8, 0x94, 0x7D, 0x39, 0x4C, 0x6F, 0xA8, 0x33, 0xAD, 0x21, 0x33, 0x63, 0xE2, 0xCB, 0x5E, 0xBB, 0xD1, 0x35, 0x1A, 0x72, 0xE5, 0xE5, 0x3F, 0x10, 0xDF, 0x2F, 0x7C, 0xC1, 0x6C, 0x4B, 0x1C, 0x55, 0x25, 0x77 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, dgSOD2.ToArray()) != 0) { return -162; }

                //Finalize
                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }
            }
            catch (Exception ex)
            {

                return -101;
            }

            return 0;
        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <param name="Kenc"></param>
        /// <param name="Kmac"></param>
        /// <returns></returns>
        public int SaveIDL2Card6(byte[] DG1, byte[] DG2, byte[] DG3, byte[] DG4, byte[] DG5, byte[] DGCommon, byte[] Kenc, byte[] Kmac, byte[] mrzInfo)
        {
            log.Info("SaveIDL2Card");

            var sc = new SecureMessaging();
            bool isOldCard = false;

            try
            {
                Connect2Card();

                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x05, 0x00 }, 28) == 0)
                {
                    return -999;
                }

                var appConfig = ConfigurationManager.OpenExeConfiguration(Assembly.GetExecutingAssembly().Location);
                string loginAndPasw = appConfig.AppSettings.Settings["LoginPswd"].Value;

                log.Info(loginAndPasw);
                //var loginAndPasw = ConfigurationManager.AppSettings["LoginPswd"];

                if (!string.IsNullOrEmpty(loginAndPasw))
                {
                    string[] log_pas = loginAndPasw.Split(':');

                    if (log_pas.Any())
                    {
                        if (log_pas.Length == 2)
                        {
                            var reqRes = ServerApiController.LoginReqRes(log_pas[0], log_pas[1]);

                            log.Info(log_pas[0]);
                            log.Info(log_pas[1]);

                            if (reqRes != null)
                                ServerApiController.token = reqRes.data.Token;
                        }
                    }
                }


                var CardNUmber = sc.ReadCardNumber();

                log.Info("ReadCardNumber");
                log.Info(CardNUmber);
                string ISD_Key = string.Empty;

                if (isOldCard)
                {
                    sc.InstallAppletV3();
                }
                else
                {
                    log.Info("GetKey");
                    var KeyValue = ServerApiController.GetKey(CardNUmber);

                    ISD_Key = KeyValue._data._message;

                    log.Info(KeyValue);

                    if (!string.IsNullOrEmpty(ISD_Key))
                    {
                        log.Info("Reset");
                        sc.InstallAppletV3(ISD_Key);
                    }
                    else
                    {
                        sc.InstallAppletV3();
                    }
                }

                //sc.InstallAppletV3();

                log.Info("Begin Print");

                iCard.Disconnect(DISCONNECT.Reset);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Unpower);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Eject);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Leave);

                Connect2Card();

                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                {
                    if (RepaireCardCommands(CardFactoryMode.DrivingLicence) == 0)
                    {
                        if (isOldCard)
                        {
                            sc.InstallAppletV3();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(ISD_Key))
                            {
                                sc.InstallAppletV3(ISD_Key);
                            }
                            else
                            {
                                sc.InstallAppletV3();
                            }
                        }

                    }

                    iCard.Disconnect(DISCONNECT.Reset);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Unpower);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Eject);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Leave);

                    Connect2Card();

                    if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                    {
                        if (RepaireCardCommands(CardFactoryMode.DrivingLicence) == 0)
                        {
                            sc.InstallAppletV3();
                        }

                        iCard.Disconnect(DISCONNECT.Reset);

                        Connect2Card();

                        iCard.Disconnect(DISCONNECT.Unpower);

                        Connect2Card();

                        iCard.Disconnect(DISCONNECT.Eject);

                        Connect2Card();

                        iCard.Disconnect(DISCONNECT.Leave);

                        Connect2Card();

                        if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                        {
                            return -1;
                        }
                    }
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x0D, 0x0C, 0xFF, 0xFF, 0x0C, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0) //
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kenc) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kmac) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x10, 0x0C, 0x00, 0xFF, 0xFF, 0x0C, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x10, 0x0C, 0xFF, 0xFF, 0xFF, 0x0C }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x02, 0x58, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x6B, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                if (CallApduCommand(0x00, 0xD6, 0x00, 0x00, DG2) != 0) { return -43; }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x62, 0x68, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -12;
                }


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x33, 0x88, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -13;
                }

                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    return -14;
                //}


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //End of Create part



                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0) { return -18; }

                /*
                 * # WriteBACKeys
                   # WriteDESKeys
                 */

                List<byte> lk = new List<byte>();
                lk.Add(0x70);
                lk.Add(0x2A);
                lk.Add(0xBF);
                lk.Add(0x0A);
                lk.Add(0x21);
                lk.Add(0x26);
                lk.Add(0xA2);
                lk.Add(0x24);
                lk.Add(0x90);
                lk.Add(0x10);
                lk.AddRange(Kenc);
                lk.Add(0x91);
                lk.Add(0x10);
                lk.AddRange(Kmac);

                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, lk.ToArray(), 0) != 0) { /*return -18;*/ }

                /*
                    # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                    # WriteECCurveComponents
                    # Prime
                    # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -21; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                /*
                 * # Order
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                /*
                 * # Co-Factor
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                /*
                 *# Put Data SM Type
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                /*
                 * 
                    # WriteECPrivateKeyComponents
                    # Private Key Value S
                    # TLVList
                    # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                /*
                 *# SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                /*
                 *# WriteECCurveComponents
                  # Prime
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                /*
                 *# Order
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                /*
                 *# Co-Factor
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                /*
                 *# WriteECPublicKeyComponents
                  # Public Key Value W
                  # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                /*
                 *  # ConcatenateBytes
                    # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                /*
                     # ConcatenateBytes
                     # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }


                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -161; }

                //if (CallApduCommand(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }

                

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x03, DG3) != 0) { return -44; }

                if (DG4 != null)
                    if (InsertBigDataPhoto(DG4) != 0) { return -45; }

                if (DG5 != null)
                    if (InsertBigDataSignature(DG5) != 0) { return -46; }

                List<byte> dg14List = new List<byte>();
                dg14List.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x01, 0x50, 0x6E, 0x82, 0x01, 0x4C, 0x31, 0x82, 0x01, 0x48, 0x30, 0x82, 0x01, 0x44, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x03, 0x01, 0x30, 0x82, 0x01, 0x37, 0x30, 0x82, 0x01, 0x33, 0x30, 0x81, 0xEC, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x30, 0x81, 0xE0, 0x02, 0x01, 0x01, 0x30, 0x2C, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x01, 0x01, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77, 0x30, 0x44, 0x04, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0x04, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6, 0x04, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7, 0x02, 0x01, 0x01, 0x03, 0x42, 0x00, 0x04, 0x25, 0xE7, 0x1F, 0xCC, 0x05, 0x3A, 0x61, 0x5B, 0xF4, 0xF3, 0x74, 0x82, 0xE0, 0xB6, 0x58, 0x8C, 0x99, 0xEC, 0x8C, 0x98, 0x67, 0xD7, 0x7E, 0x4A, 0xE1, 0x0D, 0xF3, 0x99, 0x48, 0xC7, 0x43, 0x3C, 0x7F, 0x12, 0x89, 0x8B, 0x4B, 0x42, 0x13, 0xA5, 0xC3, 0xF4, 0xFE, 0x77, 0x0F, 0x21, 0x91, 0xCB, 0x5C, 0xFA, 0xBF, 0x6B, 0xA7, 0x6B, 0xCB, 0xB4, 0x5C, 0x05, 0x4D, 0x69, 0x3C, 0x6C, 0x00, 0x3F });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x0E, dg14List.ToArray()) != 0) { return -16; }


                List<byte> dgCommon = new List<byte>();

                dgCommon.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x5E, 0x60, 0x5C, 0x5F, 0x01, 0x02, 0x01, 0x00, 0x5C, 0x07, 0x61, 0x6B, 0x6C, 0x65, 0x67, 0x63, 0x6E, 0x86, 0x4C, 0x31, 0x4A, 0x30, 0x48, 0x30, 0x41, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x02, 0x30, 0x36, 0x02, 0x01, 0x0E, 0x06, 0x08, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x01, 0x01, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x03, 0x02, 0x01, 0x03 });

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, DGCommon) != 0) { return -49; }

                List<byte> dgSOD1 = new List<byte>();

                dgSOD1.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x03, 0xF8, 0x77, 0x82, 0x07, 0x01, 0x30, 0x82, 0x06, 0xFD, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x82, 0x06, 0xEE, 0x30, 0x82, 0x06, 0xEA, 0x02, 0x01, 0x03, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x3B, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0xA0, 0x82, 0x01, 0x2F, 0x04, 0x82, 0x01, 0x2B, 0x30, 0x82, 0x01, 0x27, 0x02, 0x01, 0x00, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x11, 0x30, 0x25, 0x02, 0x01, 0x01, 0x04, 0x20, 0xF1, 0xB4, 0x91, 0x15, 0xC4, 0x98, 0x47, 0xF2, 0x52, 0x47, 0xF1, 0x5E, 0x11, 0xF7, 0xD4, 0xB3, 0x54, 0x5A, 0x8D, 0x55, 0x90, 0xB6, 0xDC, 0x94, 0x1B, 0xC5, 0xFF, 0xCF, 0x4E, 0x39, 0xF3, 0x7A, 0x30, 0x25, 0x02, 0x01, 0x02, 0x04, 0x20, 0xEF, 0x7A, 0x16, 0x97, 0x5E, 0x6F, 0xD6, 0xA0, 0x82, 0x80, 0x78, 0x17, 0x63, 0xAF, 0x49, 0xD4, 0x96, 0x16, 0xEC, 0x12, 0x58, 0xEC, 0x29, 0x1C, 0x06, 0x4B, 0x72, 0x6A, 0x8E, 0x30, 0x45, 0xDD, 0x30, 0x25, 0x02, 0x01, 0x03, 0x04, 0x20, 0xE5, 0xEC, 0x03, 0x0B, 0xCA, 0x7C, 0xB6, 0xE1, 0xD1, 0x13, 0x63, 0x36, 0xCE, 0x3C, 0x07, 0xA8, 0x18, 0x02, 0x04, 0x13, 0x86, 0xD0, 0x34, 0x4B, 0x1A, 0xE1, 0xC8, 0xD1, 0x0A, 0x26, 0x8E, 0x4E, 0x30, 0x25, 0x02, 0x01, 0x04, 0x04, 0x20, 0x5E, 0x02, 0xB1, 0x15, 0x6D, 0x54, 0x8B, 0xB8, 0x57, 0xC0, 0x23, 0xBF, 0xFF, 0x8C, 0x95, 0x99, 0xCB, 0x0A, 0x85, 0xF0, 0xF4, 0x3C, 0x00, 0xF1, 0xA7, 0xC6, 0x1E, 0x2A, 0x04, 0x71, 0xD4, 0x12, 0x30, 0x25, 0x02, 0x01, 0x05, 0x04, 0x20, 0x2A, 0x9B, 0x1F, 0x84, 0x1C, 0xAB, 0x5C, 0x7E, 0xBC, 0x53, 0xE4, 0x8B, 0x4B, 0x69, 0xF2, 0x7B, 0xDA, 0x3C, 0xC7, 0x2B, 0x45, 0x47, 0x28, 0x82, 0xE1, 0xCF, 0x86, 0xF2, 0x2A, 0xD4, 0x3D, 0xCD, 0x30, 0x25, 0x02, 0x01, 0x07, 0x04, 0x20, 0x3E, 0x9A, 0x80, 0x47, 0x3C, 0x42, 0xC1, 0x9F, 0x9C, 0x9F, 0x4D, 0x0C, 0xAB, 0x06, 0x9E, 0xB0, 0x1F, 0x24, 0x6C, 0xC4, 0xF5, 0x21, 0x13, 0x7D, 0x5F, 0x34, 0xA0, 0xD9, 0x8F, 0x20, 0xE6, 0x07, 0x30, 0x25, 0x02, 0x01, 0x0E, 0x04, 0x20, 0x01, 0x27, 0xD7, 0x48, 0xFE, 0xF7, 0x9A, 0xFB, 0xA1, 0x5F, 0x3A, 0x17, 0x8B, 0x11, 0x42, 0x3F, 0x85, 0x67, 0x51, 0x6D, 0x4A, 0x0B, 0xF3, 0x2B, 0x9C, 0xA2, 0x8D, 0xE2, 0x65, 0x59, 0x9D, 0x62, 0xA0, 0x82, 0x03, 0x6C, 0x30, 0x82, 0x03, 0x68, 0x30, 0x82, 0x02, 0x50, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x37, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x30, 0x51, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x02, 0x44, 0x53, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xD4, 0x83, 0xCC, 0x47, 0xDF, 0x84, 0x5C, 0xC1, 0xF8, 0xB1, 0x59, 0x68, 0xC7, 0xA2, 0x4F, 0x15, 0xD1, 0x2C, 0xDD, 0xB3, 0x08, 0x73, 0x7F, 0x7A, 0xB1, 0x42, 0x3C, 0xF7, 0xE3, 0x49, 0x12, 0x50, 0xD7, 0xF6, 0xB7, 0xAF, 0x60, 0x85, 0xE0, 0xF6, 0xBE, 0xCA, 0x20, 0xFB, 0xEF, 0xAA, 0x3F, 0x98, 0xD9, 0x0C, 0x4F, 0xED, 0xCB, 0x27, 0xC3, 0x76, 0x81, 0x96, 0xE4, 0x7A, 0xC7, 0x5A, 0x98, 0x15, 0xC4, 0x53, 0xF9, 0xA6, 0xCF, 0xC7, 0xCD, 0xF4, 0x55, 0x15, 0x3B, 0x3A, 0xF0, 0x98, 0x19, 0xCD, 0x89, 0x66, 0x54, 0x19, 0x41, 0x1F, 0xB3, 0xE1, 0xDD, 0xDA, 0x95, 0xD9, 0x05, 0xB1, 0xD6, 0x51, 0x50, 0x71, 0x92, 0x40, 0x81, 0xE7, 0x74, 0x37, 0xF9, 0x5E, 0x40, 0xB6, 0x1A, 0x24, 0x73, 0x6D, 0x50, 0x2F, 0x5C, 0xCF, 0xF4, 0x61, 0x71, 0xFC, 0xEE, 0x41, 0x87, 0xD8, 0x88, 0xBD, 0xBB, 0x27, 0x21, 0x6B, 0x56, 0xA1, 0xAD, 0x19, 0xA2, 0x34, 0x51, 0x51, 0x6C, 0x8B, 0xE4, 0x59, 0x1D, 0xDC, 0x09, 0x8D, 0x28, 0x07, 0xF2, 0x36, 0xAA, 0x89, 0x63, 0x4E, 0x4D, 0x2F, 0x97, 0x21, 0x5E, 0xD1, 0x74, 0x60, 0xC6, 0x0A, 0xBE, 0xF4, 0x7C, 0xB4, 0x05, 0xB7, 0x27, 0x1B, 0xD8, 0x43, 0x84, 0x1C, 0x64, 0xF7, 0xED, 0x24, 0x47, 0x60, 0xEF, 0x11, 0x59, 0x38, 0xB9, 0xC6, 0x13, 0x43, 0xDE, 0xF4, 0x44, 0xE0, 0x35, 0x51, 0x72, 0x49, 0x69, 0x70, 0x55, 0xDD, 0x39, 0xDE, 0xC2, 0xAB, 0x70, 0x7A, 0xBD, 0x1C, 0xE5, 0x2F, 0xFE, 0xB3, 0xAE, 0x86, 0x4E, 0xB7, 0x82, 0xDB, 0x96, 0xEE, 0x7C, 0xE4, 0x0D, 0x2C, 0x6E, 0xB8, 0x22, 0x57, 0x08, 0xCE, 0xCC, 0x61, 0x68, 0x25, 0x1D, 0xEC, 0x5E, 0xE8, 0x05, 0x75, 0xC5, 0xE4, 0xB2, 0x2E, 0x02, 0xEE, 0x95, 0x7C, 0xBC, 0xEC, 0xD2, 0xF7, 0xE0, 0x3B, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x41, 0x30, 0x3F, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xE9, 0xC6, 0x0E, 0x7E, 0x1C, 0x9F, 0x55, 0x3D, 0x1C, 0xD3, 0x55, 0xA2, 0x33, 0xDC, 0x58, 0x73, 0x90, 0xCD, 0x2D, 0xA6, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x31, 0x8F, 0xF7, 0xAF, 0xD8, 0x19, 0x7C, 0xF1, 0x2E, 0x61, 0xC0, 0x5B, 0xF2, 0x7F, 0xA2, 0x64, 0xD1, 0x36, 0xC2, 0x1F, 0x98, 0x3D, 0x14, 0x06, 0x2B, 0x84 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x1D, dgSOD1.ToArray()) != 0) { return -161; }

                List<byte> dgSOD2 = new List<byte>();

                dgSOD2.AddRange(new byte[] { 0x54, 0x02, 0x03, 0xF8, 0x53, 0x82, 0x03, 0x0D, 0x3C, 0x3C, 0x8F, 0x92, 0xC1, 0x46, 0x9F, 0xB3, 0x9E, 0xC0, 0xF9, 0xAC, 0x60, 0xC3, 0x19, 0x6D, 0x4B, 0x4F, 0xD8, 0x43, 0x7B, 0xA7, 0xA7, 0x48, 0x33, 0x34, 0x26, 0xE6, 0x1E, 0x4B, 0xC1, 0xAE, 0xF8, 0x38, 0xA1, 0x6D, 0xEE, 0x03, 0xB7, 0xDF, 0xC0, 0xD4, 0xDE, 0xE8, 0x07, 0x26, 0xFB, 0x44, 0x51, 0x2F, 0x90, 0x7A, 0xA8, 0x6F, 0xCF, 0xA8, 0xA6, 0x42, 0x46, 0x02, 0x85, 0xF0, 0x7E, 0xB1, 0x41, 0xC7, 0xFE, 0xCA, 0xEB, 0x7E, 0xF9, 0xC8, 0x51, 0x31, 0x63, 0x5E, 0x87, 0x22, 0x00, 0xAA, 0x9A, 0x56, 0xAE, 0xD7, 0x41, 0x7C, 0x5C, 0x55, 0x43, 0x39, 0x44, 0xF2, 0x6E, 0xE5, 0x06, 0x5F, 0x19, 0x2E, 0x2E, 0xD9, 0x27, 0xA5, 0x73, 0x02, 0x00, 0x57, 0x4B, 0x1D, 0xE9, 0xC9, 0x64, 0x7A, 0x60, 0xE3, 0xD0, 0x49, 0x55, 0xEC, 0x56, 0x05, 0xBE, 0xC2, 0xB1, 0xF2, 0x31, 0x20, 0x48, 0xDE, 0xB2, 0xCC, 0x40, 0x9C, 0xF4, 0xC6, 0x61, 0xCB, 0xB0, 0x0D, 0x8A, 0x22, 0xB1, 0x69, 0xAA, 0xC5, 0xFF, 0x17, 0x8A, 0x75, 0x28, 0xCF, 0x48, 0xBE, 0x24, 0x99, 0x43, 0x10, 0x39, 0xE2, 0xF6, 0x4B, 0xCC, 0xF3, 0xF2, 0xF9, 0x32, 0x24, 0xD7, 0x1A, 0x6E, 0x58, 0x95, 0x9C, 0x19, 0x5F, 0xCD, 0x1B, 0x53, 0xCF, 0xE0, 0xD7, 0x11, 0xC1, 0x7F, 0x0F, 0x0C, 0xAC, 0x09, 0xB0, 0x3E, 0x15, 0x76, 0xFA, 0x86, 0xDD, 0x7D, 0xB1, 0x6E, 0xB8, 0x36, 0xA3, 0x48, 0x31, 0x5D, 0x23, 0xE3, 0xAA, 0xC8, 0x54, 0x59, 0x00, 0x97, 0x25, 0xA6, 0x02, 0x7F, 0xA3, 0x25, 0xFC, 0xDD, 0x43, 0x99, 0xF0, 0x78, 0xFC, 0x14, 0xCC, 0xA2, 0xB5, 0xB7, 0xBF, 0x31, 0x82, 0x02, 0x23, 0x30, 0x82, 0x02, 0x1F, 0x02, 0x01, 0x01, 0x30, 0x60, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA0, 0x81, 0x95, 0x30, 0x15, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x03, 0x31, 0x08, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0x30, 0x1C, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x05, 0x31, 0x0F, 0x17, 0x0D, 0x31, 0x37, 0x30, 0x36, 0x32, 0x39, 0x30, 0x37, 0x32, 0x30, 0x33, 0x39, 0x5A, 0x30, 0x2D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x34, 0x31, 0x20, 0x30, 0x1E, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA1, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x30, 0x2F, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x04, 0x31, 0x22, 0x04, 0x20, 0xA8, 0xDB, 0x0F, 0x33, 0x29, 0x1F, 0x3A, 0x2B, 0x29, 0xB8, 0x02, 0xA5, 0xCD, 0xA2, 0x39, 0xFB, 0x38, 0x26, 0x01, 0x0B, 0xA6, 0x2E, 0x93, 0x06, 0x90, 0xB2, 0xA1, 0x05, 0x2C, 0x08, 0x2C, 0x93, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x01, 0x00, 0xC6, 0x76, 0x3B, 0x16, 0xC3, 0xD3, 0x34, 0x38, 0xCB, 0x1E, 0x1D, 0x3A, 0xD9, 0x95, 0x35, 0xDD, 0x85, 0x16, 0x34, 0x51, 0x98, 0x9A, 0xD6, 0x31, 0x61, 0xBF, 0x35, 0x59, 0xB8, 0x42, 0x68, 0x60, 0x40, 0xD3, 0x72, 0xDC, 0x06, 0xAC, 0x62, 0x47, 0xDF, 0xCC, 0xC4, 0x9F, 0xC9, 0x7E, 0xED, 0x41, 0x4A, 0x30, 0x68, 0x57, 0x6E, 0x70, 0x63, 0xC9, 0x7C, 0xA3, 0x89, 0x63, 0x0C, 0x15, 0x63, 0xA8, 0xE8, 0x1F, 0x9C, 0x48, 0xD1, 0x0B, 0x0F, 0x11, 0xE9, 0x80, 0x79, 0xF2, 0x6E, 0xE4, 0x8C, 0x36, 0xBE, 0xD1, 0xE1, 0xB0, 0x32, 0xA3, 0x8C, 0x07, 0x1C, 0x63, 0x4D, 0xD7, 0x68, 0x42, 0x75, 0x65, 0xDA, 0xF9, 0x2B, 0xE0, 0xE4, 0xFE, 0x98, 0x8D, 0x99, 0xAC, 0xD7, 0x48, 0xBB, 0x28, 0xD8, 0x2E, 0xD2, 0x71, 0x41, 0xAD, 0xDF, 0x39, 0xF8, 0xC4, 0xF9, 0xC5, 0xDE, 0xA9, 0xED, 0x84, 0x1F, 0x44, 0x64, 0x8E, 0x22, 0xBF, 0x31, 0xB1, 0x29, 0x59, 0x4D, 0xD8, 0x9D, 0x5B, 0xF2, 0x16, 0x6D, 0x97, 0xEB, 0x84, 0x9D, 0xAA, 0x44, 0x02, 0x2C, 0x8E, 0x49, 0x3F, 0xB9, 0x30, 0x04, 0x72, 0x2E, 0xCE, 0x69, 0x84, 0x8A, 0xA7, 0x42, 0x65, 0xC8, 0x7E, 0x7B, 0x63, 0x06, 0x8A, 0x76, 0x73, 0x4D, 0xE6, 0x43, 0x20, 0xF0, 0x35, 0x09, 0x53, 0x72, 0x3C, 0x60, 0xD1, 0x33, 0x66, 0x71, 0xF3, 0xF2, 0x8D, 0xB9, 0x69, 0x30, 0x83, 0x0E, 0x83, 0xDC, 0x4C, 0xC4, 0xB9, 0x3B, 0x29, 0xA2, 0xEC, 0xF2, 0x1D, 0xCC, 0xD2, 0x4F, 0xCD, 0xE0, 0x54, 0x59, 0x6B, 0xA3, 0xFA, 0xE7, 0x80, 0x6B, 0x3A, 0xD8, 0x94, 0x7D, 0x39, 0x4C, 0x6F, 0xA8, 0x33, 0xAD, 0x21, 0x33, 0x63, 0xE2, 0xCB, 0x5E, 0xBB, 0xD1, 0x35, 0x1A, 0x72, 0xE5, 0xE5, 0x3F, 0x10, 0xDF, 0x2F, 0x7C, 0xC1, 0x6C, 0x4B, 0x1C, 0x55, 0x25, 0x77 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x1D, dgSOD2.ToArray()) != 0) { return -162; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }

                sc.InstallAppletV5();
            }
            catch (Exception ex)
            {
                log.Info(ex.ToString());
                return -101;
            }

            return 0;
        }


        private bool IsAlreadyPrinted()
        {
            if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x05, 0x00 }, 28) == 0)
            {
                return true;
            }

            return false;
        }

        private bool RepairmentOfCard()
        {
            SecureMessaging sc = new SecureMessaging();

            var appConfig = ConfigurationManager.OpenExeConfiguration(Assembly.GetExecutingAssembly().Location);
            string loginAndPasw = appConfig.AppSettings.Settings["LoginPswd"].Value;

            log.Info(loginAndPasw);
            //var loginAndPasw = ConfigurationManager.AppSettings["LoginPswd"];

            if (!string.IsNullOrEmpty(loginAndPasw))
            {
                string[] log_pas = loginAndPasw.Split(':');

                if (log_pas.Any())
                {
                    if (log_pas.Length == 2)
                    {
                        var reqRes = ServerApiController.LoginReqRes(log_pas[0], log_pas[1]);

                        log.Info(log_pas[0]);
                        log.Info(log_pas[1]);

                        if (reqRes != null)
                            ServerApiController.token = reqRes.data.Token;
                    }
                }
            }


            var CardNUmber = sc.ReadCardNumber();

            log.Info("ReadCardNumber");
            log.Info(CardNUmber);

            log.Info("GetKey");
            var KeyValue = ServerApiController.GetKey(CardNUmber);

            log.Info(KeyValue);

            if (!string.IsNullOrEmpty(KeyValue._data._message))
            {
                log.Info("Reset");
                sc.InstallAppletV3(KeyValue._data._message);
            }
            else
            {
                sc.InstallAppletV3();
            }
            //sc.InstallAppletV3();

            log.Info("Begin Print");

            iCard.Disconnect(DISCONNECT.Reset);

            Connect2Card();

            iCard.Disconnect(DISCONNECT.Unpower);

            Connect2Card();

            iCard.Disconnect(DISCONNECT.Eject);

            Connect2Card();

            iCard.Disconnect(DISCONNECT.Leave);

            Connect2Card();

            //SendApdu: ISO7816.SelectFileByDFName
            if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
            {
                if (RepaireCardCommands(CardFactoryMode.DrivingLicence) == 0)
                {
                    if (!string.IsNullOrEmpty(KeyValue._data._message))
                    {
                        sc.InstallAppletV3(KeyValue._data._message);
                    }
                    else
                    {
                        sc.InstallAppletV3();
                    }
                }

                iCard.Disconnect(DISCONNECT.Reset);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Unpower);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Eject);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Leave);

                Connect2Card();

                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                {
                    if (RepaireCardCommands(CardFactoryMode.DrivingLicence) == 0)
                    {
                        sc.InstallAppletV3();
                    }

                    iCard.Disconnect(DISCONNECT.Reset);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Unpower);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Eject);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Leave);

                    Connect2Card();

                    if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <param name="Kenc"></param>
        /// <param name="Kmac"></param>
        /// <returns></returns>
        public int SaveIDL2Card7(byte[] DG1, byte[] DG2, byte[] DG3, byte[] DG4, byte[] DG5, byte[] DGCommon, byte[] Kenc, byte[] Kmac, byte[] mrzInfo)
        {
            log.Info("SaveIDL2Card");

            var sc = new SecureMessaging();

            try
            {
                Connect2Card();

                if (IsAlreadyPrinted())
                {
                    return -999;
                }

                if (RepairmentOfCard())
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x0D, 0x0C, 0xFF, 0xFF, 0x0C, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0) //
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kenc) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kmac) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x10, 0x0C, 0x00, 0xFF, 0xFF, 0x0C, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x10, 0x0C, 0xFF, 0xFF, 0xFF, 0x0C }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x02, 0x58, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x6B, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                if (CallApduCommand(0x00, 0xD6, 0x00, 0x00, DG2) != 0) { return -43; }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x62, 0x68, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -12;
                }


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x33, 0x88, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -13;
                }

                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    return -14;
                //}


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //End of Create part



                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0) { return -18; }

                /*
                 * # WriteBACKeys
                   # WriteDESKeys
                 */

                List<byte> lk = new List<byte>();
                lk.Add(0x70);
                lk.Add(0x2A);
                lk.Add(0xBF);
                lk.Add(0x0A);
                lk.Add(0x21);
                lk.Add(0x26);
                lk.Add(0xA2);
                lk.Add(0x24);
                lk.Add(0x90);
                lk.Add(0x10);
                lk.AddRange(Kenc);
                lk.Add(0x91);
                lk.Add(0x10);
                lk.AddRange(Kmac);

                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, lk.ToArray(), 0) != 0) { /*return -18;*/ }

                /*
                    # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                    # WriteECCurveComponents
                    # Prime
                    # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -21; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                /*
                 * # Order
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                /*
                 * # Co-Factor
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                /*
                 *# Put Data SM Type
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                /*
                 * 
                    # WriteECPrivateKeyComponents
                    # Private Key Value S
                    # TLVList
                    # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                /*
                 *# SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                /*
                 *# WriteECCurveComponents
                  # Prime
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                /*
                 *# Order
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                /*
                 *# Co-Factor
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                /*
                 *# WriteECPublicKeyComponents
                  # Public Key Value W
                  # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                /*
                 *  # ConcatenateBytes
                    # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                /*
                     # ConcatenateBytes
                     # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }


                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -161; }

                //if (CallApduCommand(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }



                if (CallApduCommand(0x00, 0xD7, 0x00, 0x03, DG3) != 0) { return -44; }

                if (DG4 != null)
                    if (InsertBigDataPhoto(DG4) != 0) { return -45; }

                if (DG5 != null)
                    if (InsertBigDataSignature(DG5) != 0) { return -46; }

                List<byte> dg14List = new List<byte>();
                dg14List.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x01, 0x50, 0x6E, 0x82, 0x01, 0x4C, 0x31, 0x82, 0x01, 0x48, 0x30, 0x82, 0x01, 0x44, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x03, 0x01, 0x30, 0x82, 0x01, 0x37, 0x30, 0x82, 0x01, 0x33, 0x30, 0x81, 0xEC, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x30, 0x81, 0xE0, 0x02, 0x01, 0x01, 0x30, 0x2C, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x01, 0x01, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77, 0x30, 0x44, 0x04, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0x04, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6, 0x04, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7, 0x02, 0x01, 0x01, 0x03, 0x42, 0x00, 0x04, 0x25, 0xE7, 0x1F, 0xCC, 0x05, 0x3A, 0x61, 0x5B, 0xF4, 0xF3, 0x74, 0x82, 0xE0, 0xB6, 0x58, 0x8C, 0x99, 0xEC, 0x8C, 0x98, 0x67, 0xD7, 0x7E, 0x4A, 0xE1, 0x0D, 0xF3, 0x99, 0x48, 0xC7, 0x43, 0x3C, 0x7F, 0x12, 0x89, 0x8B, 0x4B, 0x42, 0x13, 0xA5, 0xC3, 0xF4, 0xFE, 0x77, 0x0F, 0x21, 0x91, 0xCB, 0x5C, 0xFA, 0xBF, 0x6B, 0xA7, 0x6B, 0xCB, 0xB4, 0x5C, 0x05, 0x4D, 0x69, 0x3C, 0x6C, 0x00, 0x3F });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x0E, dg14List.ToArray()) != 0) { return -16; }


                List<byte> dgCommon = new List<byte>();

                dgCommon.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x5E, 0x60, 0x5C, 0x5F, 0x01, 0x02, 0x01, 0x00, 0x5C, 0x07, 0x61, 0x6B, 0x6C, 0x65, 0x67, 0x63, 0x6E, 0x86, 0x4C, 0x31, 0x4A, 0x30, 0x48, 0x30, 0x41, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x02, 0x30, 0x36, 0x02, 0x01, 0x0E, 0x06, 0x08, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x01, 0x01, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x03, 0x02, 0x01, 0x03 });

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, DGCommon) != 0) { return -49; }

                List<byte> dgSOD1 = new List<byte>();

                dgSOD1.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x03, 0xF8, 0x77, 0x82, 0x07, 0x01, 0x30, 0x82, 0x06, 0xFD, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x82, 0x06, 0xEE, 0x30, 0x82, 0x06, 0xEA, 0x02, 0x01, 0x03, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x3B, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0xA0, 0x82, 0x01, 0x2F, 0x04, 0x82, 0x01, 0x2B, 0x30, 0x82, 0x01, 0x27, 0x02, 0x01, 0x00, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x11, 0x30, 0x25, 0x02, 0x01, 0x01, 0x04, 0x20, 0xF1, 0xB4, 0x91, 0x15, 0xC4, 0x98, 0x47, 0xF2, 0x52, 0x47, 0xF1, 0x5E, 0x11, 0xF7, 0xD4, 0xB3, 0x54, 0x5A, 0x8D, 0x55, 0x90, 0xB6, 0xDC, 0x94, 0x1B, 0xC5, 0xFF, 0xCF, 0x4E, 0x39, 0xF3, 0x7A, 0x30, 0x25, 0x02, 0x01, 0x02, 0x04, 0x20, 0xEF, 0x7A, 0x16, 0x97, 0x5E, 0x6F, 0xD6, 0xA0, 0x82, 0x80, 0x78, 0x17, 0x63, 0xAF, 0x49, 0xD4, 0x96, 0x16, 0xEC, 0x12, 0x58, 0xEC, 0x29, 0x1C, 0x06, 0x4B, 0x72, 0x6A, 0x8E, 0x30, 0x45, 0xDD, 0x30, 0x25, 0x02, 0x01, 0x03, 0x04, 0x20, 0xE5, 0xEC, 0x03, 0x0B, 0xCA, 0x7C, 0xB6, 0xE1, 0xD1, 0x13, 0x63, 0x36, 0xCE, 0x3C, 0x07, 0xA8, 0x18, 0x02, 0x04, 0x13, 0x86, 0xD0, 0x34, 0x4B, 0x1A, 0xE1, 0xC8, 0xD1, 0x0A, 0x26, 0x8E, 0x4E, 0x30, 0x25, 0x02, 0x01, 0x04, 0x04, 0x20, 0x5E, 0x02, 0xB1, 0x15, 0x6D, 0x54, 0x8B, 0xB8, 0x57, 0xC0, 0x23, 0xBF, 0xFF, 0x8C, 0x95, 0x99, 0xCB, 0x0A, 0x85, 0xF0, 0xF4, 0x3C, 0x00, 0xF1, 0xA7, 0xC6, 0x1E, 0x2A, 0x04, 0x71, 0xD4, 0x12, 0x30, 0x25, 0x02, 0x01, 0x05, 0x04, 0x20, 0x2A, 0x9B, 0x1F, 0x84, 0x1C, 0xAB, 0x5C, 0x7E, 0xBC, 0x53, 0xE4, 0x8B, 0x4B, 0x69, 0xF2, 0x7B, 0xDA, 0x3C, 0xC7, 0x2B, 0x45, 0x47, 0x28, 0x82, 0xE1, 0xCF, 0x86, 0xF2, 0x2A, 0xD4, 0x3D, 0xCD, 0x30, 0x25, 0x02, 0x01, 0x07, 0x04, 0x20, 0x3E, 0x9A, 0x80, 0x47, 0x3C, 0x42, 0xC1, 0x9F, 0x9C, 0x9F, 0x4D, 0x0C, 0xAB, 0x06, 0x9E, 0xB0, 0x1F, 0x24, 0x6C, 0xC4, 0xF5, 0x21, 0x13, 0x7D, 0x5F, 0x34, 0xA0, 0xD9, 0x8F, 0x20, 0xE6, 0x07, 0x30, 0x25, 0x02, 0x01, 0x0E, 0x04, 0x20, 0x01, 0x27, 0xD7, 0x48, 0xFE, 0xF7, 0x9A, 0xFB, 0xA1, 0x5F, 0x3A, 0x17, 0x8B, 0x11, 0x42, 0x3F, 0x85, 0x67, 0x51, 0x6D, 0x4A, 0x0B, 0xF3, 0x2B, 0x9C, 0xA2, 0x8D, 0xE2, 0x65, 0x59, 0x9D, 0x62, 0xA0, 0x82, 0x03, 0x6C, 0x30, 0x82, 0x03, 0x68, 0x30, 0x82, 0x02, 0x50, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x37, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x30, 0x51, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x02, 0x44, 0x53, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xD4, 0x83, 0xCC, 0x47, 0xDF, 0x84, 0x5C, 0xC1, 0xF8, 0xB1, 0x59, 0x68, 0xC7, 0xA2, 0x4F, 0x15, 0xD1, 0x2C, 0xDD, 0xB3, 0x08, 0x73, 0x7F, 0x7A, 0xB1, 0x42, 0x3C, 0xF7, 0xE3, 0x49, 0x12, 0x50, 0xD7, 0xF6, 0xB7, 0xAF, 0x60, 0x85, 0xE0, 0xF6, 0xBE, 0xCA, 0x20, 0xFB, 0xEF, 0xAA, 0x3F, 0x98, 0xD9, 0x0C, 0x4F, 0xED, 0xCB, 0x27, 0xC3, 0x76, 0x81, 0x96, 0xE4, 0x7A, 0xC7, 0x5A, 0x98, 0x15, 0xC4, 0x53, 0xF9, 0xA6, 0xCF, 0xC7, 0xCD, 0xF4, 0x55, 0x15, 0x3B, 0x3A, 0xF0, 0x98, 0x19, 0xCD, 0x89, 0x66, 0x54, 0x19, 0x41, 0x1F, 0xB3, 0xE1, 0xDD, 0xDA, 0x95, 0xD9, 0x05, 0xB1, 0xD6, 0x51, 0x50, 0x71, 0x92, 0x40, 0x81, 0xE7, 0x74, 0x37, 0xF9, 0x5E, 0x40, 0xB6, 0x1A, 0x24, 0x73, 0x6D, 0x50, 0x2F, 0x5C, 0xCF, 0xF4, 0x61, 0x71, 0xFC, 0xEE, 0x41, 0x87, 0xD8, 0x88, 0xBD, 0xBB, 0x27, 0x21, 0x6B, 0x56, 0xA1, 0xAD, 0x19, 0xA2, 0x34, 0x51, 0x51, 0x6C, 0x8B, 0xE4, 0x59, 0x1D, 0xDC, 0x09, 0x8D, 0x28, 0x07, 0xF2, 0x36, 0xAA, 0x89, 0x63, 0x4E, 0x4D, 0x2F, 0x97, 0x21, 0x5E, 0xD1, 0x74, 0x60, 0xC6, 0x0A, 0xBE, 0xF4, 0x7C, 0xB4, 0x05, 0xB7, 0x27, 0x1B, 0xD8, 0x43, 0x84, 0x1C, 0x64, 0xF7, 0xED, 0x24, 0x47, 0x60, 0xEF, 0x11, 0x59, 0x38, 0xB9, 0xC6, 0x13, 0x43, 0xDE, 0xF4, 0x44, 0xE0, 0x35, 0x51, 0x72, 0x49, 0x69, 0x70, 0x55, 0xDD, 0x39, 0xDE, 0xC2, 0xAB, 0x70, 0x7A, 0xBD, 0x1C, 0xE5, 0x2F, 0xFE, 0xB3, 0xAE, 0x86, 0x4E, 0xB7, 0x82, 0xDB, 0x96, 0xEE, 0x7C, 0xE4, 0x0D, 0x2C, 0x6E, 0xB8, 0x22, 0x57, 0x08, 0xCE, 0xCC, 0x61, 0x68, 0x25, 0x1D, 0xEC, 0x5E, 0xE8, 0x05, 0x75, 0xC5, 0xE4, 0xB2, 0x2E, 0x02, 0xEE, 0x95, 0x7C, 0xBC, 0xEC, 0xD2, 0xF7, 0xE0, 0x3B, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x41, 0x30, 0x3F, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xE9, 0xC6, 0x0E, 0x7E, 0x1C, 0x9F, 0x55, 0x3D, 0x1C, 0xD3, 0x55, 0xA2, 0x33, 0xDC, 0x58, 0x73, 0x90, 0xCD, 0x2D, 0xA6, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x31, 0x8F, 0xF7, 0xAF, 0xD8, 0x19, 0x7C, 0xF1, 0x2E, 0x61, 0xC0, 0x5B, 0xF2, 0x7F, 0xA2, 0x64, 0xD1, 0x36, 0xC2, 0x1F, 0x98, 0x3D, 0x14, 0x06, 0x2B, 0x84 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x1D, dgSOD1.ToArray()) != 0) { return -161; }

                List<byte> dgSOD2 = new List<byte>();

                dgSOD2.AddRange(new byte[] { 0x54, 0x02, 0x03, 0xF8, 0x53, 0x82, 0x03, 0x0D, 0x3C, 0x3C, 0x8F, 0x92, 0xC1, 0x46, 0x9F, 0xB3, 0x9E, 0xC0, 0xF9, 0xAC, 0x60, 0xC3, 0x19, 0x6D, 0x4B, 0x4F, 0xD8, 0x43, 0x7B, 0xA7, 0xA7, 0x48, 0x33, 0x34, 0x26, 0xE6, 0x1E, 0x4B, 0xC1, 0xAE, 0xF8, 0x38, 0xA1, 0x6D, 0xEE, 0x03, 0xB7, 0xDF, 0xC0, 0xD4, 0xDE, 0xE8, 0x07, 0x26, 0xFB, 0x44, 0x51, 0x2F, 0x90, 0x7A, 0xA8, 0x6F, 0xCF, 0xA8, 0xA6, 0x42, 0x46, 0x02, 0x85, 0xF0, 0x7E, 0xB1, 0x41, 0xC7, 0xFE, 0xCA, 0xEB, 0x7E, 0xF9, 0xC8, 0x51, 0x31, 0x63, 0x5E, 0x87, 0x22, 0x00, 0xAA, 0x9A, 0x56, 0xAE, 0xD7, 0x41, 0x7C, 0x5C, 0x55, 0x43, 0x39, 0x44, 0xF2, 0x6E, 0xE5, 0x06, 0x5F, 0x19, 0x2E, 0x2E, 0xD9, 0x27, 0xA5, 0x73, 0x02, 0x00, 0x57, 0x4B, 0x1D, 0xE9, 0xC9, 0x64, 0x7A, 0x60, 0xE3, 0xD0, 0x49, 0x55, 0xEC, 0x56, 0x05, 0xBE, 0xC2, 0xB1, 0xF2, 0x31, 0x20, 0x48, 0xDE, 0xB2, 0xCC, 0x40, 0x9C, 0xF4, 0xC6, 0x61, 0xCB, 0xB0, 0x0D, 0x8A, 0x22, 0xB1, 0x69, 0xAA, 0xC5, 0xFF, 0x17, 0x8A, 0x75, 0x28, 0xCF, 0x48, 0xBE, 0x24, 0x99, 0x43, 0x10, 0x39, 0xE2, 0xF6, 0x4B, 0xCC, 0xF3, 0xF2, 0xF9, 0x32, 0x24, 0xD7, 0x1A, 0x6E, 0x58, 0x95, 0x9C, 0x19, 0x5F, 0xCD, 0x1B, 0x53, 0xCF, 0xE0, 0xD7, 0x11, 0xC1, 0x7F, 0x0F, 0x0C, 0xAC, 0x09, 0xB0, 0x3E, 0x15, 0x76, 0xFA, 0x86, 0xDD, 0x7D, 0xB1, 0x6E, 0xB8, 0x36, 0xA3, 0x48, 0x31, 0x5D, 0x23, 0xE3, 0xAA, 0xC8, 0x54, 0x59, 0x00, 0x97, 0x25, 0xA6, 0x02, 0x7F, 0xA3, 0x25, 0xFC, 0xDD, 0x43, 0x99, 0xF0, 0x78, 0xFC, 0x14, 0xCC, 0xA2, 0xB5, 0xB7, 0xBF, 0x31, 0x82, 0x02, 0x23, 0x30, 0x82, 0x02, 0x1F, 0x02, 0x01, 0x01, 0x30, 0x60, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA0, 0x81, 0x95, 0x30, 0x15, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x03, 0x31, 0x08, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0x30, 0x1C, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x05, 0x31, 0x0F, 0x17, 0x0D, 0x31, 0x37, 0x30, 0x36, 0x32, 0x39, 0x30, 0x37, 0x32, 0x30, 0x33, 0x39, 0x5A, 0x30, 0x2D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x34, 0x31, 0x20, 0x30, 0x1E, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA1, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x30, 0x2F, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x04, 0x31, 0x22, 0x04, 0x20, 0xA8, 0xDB, 0x0F, 0x33, 0x29, 0x1F, 0x3A, 0x2B, 0x29, 0xB8, 0x02, 0xA5, 0xCD, 0xA2, 0x39, 0xFB, 0x38, 0x26, 0x01, 0x0B, 0xA6, 0x2E, 0x93, 0x06, 0x90, 0xB2, 0xA1, 0x05, 0x2C, 0x08, 0x2C, 0x93, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x01, 0x00, 0xC6, 0x76, 0x3B, 0x16, 0xC3, 0xD3, 0x34, 0x38, 0xCB, 0x1E, 0x1D, 0x3A, 0xD9, 0x95, 0x35, 0xDD, 0x85, 0x16, 0x34, 0x51, 0x98, 0x9A, 0xD6, 0x31, 0x61, 0xBF, 0x35, 0x59, 0xB8, 0x42, 0x68, 0x60, 0x40, 0xD3, 0x72, 0xDC, 0x06, 0xAC, 0x62, 0x47, 0xDF, 0xCC, 0xC4, 0x9F, 0xC9, 0x7E, 0xED, 0x41, 0x4A, 0x30, 0x68, 0x57, 0x6E, 0x70, 0x63, 0xC9, 0x7C, 0xA3, 0x89, 0x63, 0x0C, 0x15, 0x63, 0xA8, 0xE8, 0x1F, 0x9C, 0x48, 0xD1, 0x0B, 0x0F, 0x11, 0xE9, 0x80, 0x79, 0xF2, 0x6E, 0xE4, 0x8C, 0x36, 0xBE, 0xD1, 0xE1, 0xB0, 0x32, 0xA3, 0x8C, 0x07, 0x1C, 0x63, 0x4D, 0xD7, 0x68, 0x42, 0x75, 0x65, 0xDA, 0xF9, 0x2B, 0xE0, 0xE4, 0xFE, 0x98, 0x8D, 0x99, 0xAC, 0xD7, 0x48, 0xBB, 0x28, 0xD8, 0x2E, 0xD2, 0x71, 0x41, 0xAD, 0xDF, 0x39, 0xF8, 0xC4, 0xF9, 0xC5, 0xDE, 0xA9, 0xED, 0x84, 0x1F, 0x44, 0x64, 0x8E, 0x22, 0xBF, 0x31, 0xB1, 0x29, 0x59, 0x4D, 0xD8, 0x9D, 0x5B, 0xF2, 0x16, 0x6D, 0x97, 0xEB, 0x84, 0x9D, 0xAA, 0x44, 0x02, 0x2C, 0x8E, 0x49, 0x3F, 0xB9, 0x30, 0x04, 0x72, 0x2E, 0xCE, 0x69, 0x84, 0x8A, 0xA7, 0x42, 0x65, 0xC8, 0x7E, 0x7B, 0x63, 0x06, 0x8A, 0x76, 0x73, 0x4D, 0xE6, 0x43, 0x20, 0xF0, 0x35, 0x09, 0x53, 0x72, 0x3C, 0x60, 0xD1, 0x33, 0x66, 0x71, 0xF3, 0xF2, 0x8D, 0xB9, 0x69, 0x30, 0x83, 0x0E, 0x83, 0xDC, 0x4C, 0xC4, 0xB9, 0x3B, 0x29, 0xA2, 0xEC, 0xF2, 0x1D, 0xCC, 0xD2, 0x4F, 0xCD, 0xE0, 0x54, 0x59, 0x6B, 0xA3, 0xFA, 0xE7, 0x80, 0x6B, 0x3A, 0xD8, 0x94, 0x7D, 0x39, 0x4C, 0x6F, 0xA8, 0x33, 0xAD, 0x21, 0x33, 0x63, 0xE2, 0xCB, 0x5E, 0xBB, 0xD1, 0x35, 0x1A, 0x72, 0xE5, 0xE5, 0x3F, 0x10, 0xDF, 0x2F, 0x7C, 0xC1, 0x6C, 0x4B, 0x1C, 0x55, 0x25, 0x77 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x1D, dgSOD2.ToArray()) != 0) { return -162; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }

                sc.InstallAppletV5();
            }
            catch (Exception ex)
            {
                log.Info(ex.ToString());
                return -101;
            }

            return 0;
        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <param name="Kenc"></param>
        /// <param name="Kmac"></param>
        /// <returns></returns>
        public int SaveVL2Card3(byte[] DG1, byte[] Kenc, byte[] Kmac, byte[] mrzInfo)
        {
            log.Info("SaveIDL2Card");

            SecureMessaging sc = new SecureMessaging();

            try
            {
                Connect2Card();

                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x05, 0x00 }, 28) == 0)
                {
                    return -999;
                }

                sc.InstallAppletV3();

                iCard.Disconnect(DISCONNECT.Reset);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Unpower);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Eject);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Leave);

                Connect2Card();

                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                {
                    if (RepaireCardCommands(CardFactoryMode.VehicleRegistration) ==0)
                    {
                        sc.InstallAppletV3();
                    }

                    iCard.Disconnect(DISCONNECT.Reset);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Unpower);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Eject);

                    Connect2Card();

                    iCard.Disconnect(DISCONNECT.Leave);

                    Connect2Card();

                    if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                    {
                        if (RepaireCardCommands(CardFactoryMode.VehicleRegistration) ==0)
                        {
                            sc.InstallAppletV3();
                        }

                        iCard.Disconnect(DISCONNECT.Reset);

                        Connect2Card();

                        iCard.Disconnect(DISCONNECT.Unpower);

                        Connect2Card();

                        iCard.Disconnect(DISCONNECT.Eject);

                        Connect2Card();

                        iCard.Disconnect(DISCONNECT.Leave);

                        Connect2Card();

                        if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0)
                        {
                            return -1;
                        }
                    }
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x0D, 0x0C, 0xFF, 0xFF, 0x0C, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0) //
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kenc) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, Kmac) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x10, 0x0C, 0x00, 0xFF, 0xFF, 0x0C, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x10, 0x0C, 0xFF, 0xFF, 0xFF, 0x0C }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x01, 0x50, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x06, 0x0C, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //End of Create part



                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28) != 0) { return -18; }

                /*
                 * # WriteBACKeys
                   # WriteDESKeys
                 */

                List<byte> lk = new List<byte>();
                lk.Add(0x70);
                lk.Add(0x2A);
                lk.Add(0xBF);
                lk.Add(0x0A);
                lk.Add(0x21);
                lk.Add(0x26);
                lk.Add(0xA2);
                lk.Add(0x24);
                lk.Add(0x90);
                lk.Add(0x10);
                lk.AddRange(Kenc);
                lk.Add(0x91);
                lk.Add(0x10);
                lk.AddRange(Kmac);

                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, lk.ToArray(), 0) != 0) { /*return -18;*/ }

                /*
                    # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                    # WriteECCurveComponents
                    # Prime
                    # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -21; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                /*
                 * # Order
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                /*
                 * # Co-Factor
                   # TLVList
                   # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                /*
                 *# Put Data SM Type
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                /*
                 * 
                    # WriteECPrivateKeyComponents
                    # Private Key Value S
                    # TLVList
                    # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                /*
                 *# SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                /*
                 *# WriteECCurveComponents
                  # Prime
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                /*
                 *# Coefficient A
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                /*
                 *# Coefficient B
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                /*
                 *# Base Point
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                /*
                 *# Order
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                /*
                 *# Co-Factor
                  # TLVList
                  # SendApdu: CV.PutDataOCI
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                /*
                 *# WriteECPublicKeyComponents
                  # Public Key Value W
                  # TLVList
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                /*
                 *  # ConcatenateBytes
                    # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                /*
                     # ConcatenateBytes
                     # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                /*
                 # ConcatenateBytes
                 # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                /*
                 *# ConcatenateBytes
                  # SendApdu: CV.StoreData
                 */
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x01, DG1) != 0) { return -42; }

                List<byte> dg14List = new List<byte>();
                dg14List.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x01, 0x50, 0x6E, 0x82, 0x01, 0x4C, 0x31, 0x82, 0x01, 0x48, 0x30, 0x82, 0x01, 0x44, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x03, 0x01, 0x30, 0x82, 0x01, 0x37, 0x30, 0x82, 0x01, 0x33, 0x30, 0x81, 0xEC, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x30, 0x81, 0xE0, 0x02, 0x01, 0x01, 0x30, 0x2C, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x01, 0x01, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77, 0x30, 0x44, 0x04, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0x04, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6, 0x04, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97, 0x02, 0x21, 0x00, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7, 0x02, 0x01, 0x01, 0x03, 0x42, 0x00, 0x04, 0x25, 0xE7, 0x1F, 0xCC, 0x05, 0x3A, 0x61, 0x5B, 0xF4, 0xF3, 0x74, 0x82, 0xE0, 0xB6, 0x58, 0x8C, 0x99, 0xEC, 0x8C, 0x98, 0x67, 0xD7, 0x7E, 0x4A, 0xE1, 0x0D, 0xF3, 0x99, 0x48, 0xC7, 0x43, 0x3C, 0x7F, 0x12, 0x89, 0x8B, 0x4B, 0x42, 0x13, 0xA5, 0xC3, 0xF4, 0xFE, 0x77, 0x0F, 0x21, 0x91, 0xCB, 0x5C, 0xFA, 0xBF, 0x6B, 0xA7, 0x6B, 0xCB, 0xB4, 0x5C, 0x05, 0x4D, 0x69, 0x3C, 0x6C, 0x00, 0x3F });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, dg14List.ToArray()) != 0) { /*return -16;*/ }


                List<byte> dgCommon = new List<byte>();

                dgCommon.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x5E, 0x60, 0x5C, 0x5F, 0x01, 0x02, 0x01, 0x00, 0x5C, 0x07, 0x61, 0x6B, 0x6C, 0x65, 0x67, 0x63, 0x6E, 0x86, 0x4C, 0x31, 0x4A, 0x30, 0x48, 0x30, 0x41, 0x06, 0x07, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x02, 0x30, 0x36, 0x02, 0x01, 0x0E, 0x06, 0x08, 0x28, 0x81, 0x8C, 0x5D, 0x03, 0x02, 0x01, 0x01, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x03, 0x02, 0x01, 0x03 });

                if (CallApduCommand(0x00, 0xD7, 0x00, 0x1E, dgCommon.ToArray()) != 0) { /*return -49;*/ }

                List<byte> dgSOD1 = new List<byte>();

                dgSOD1.AddRange(new byte[] { 0x54, 0x01, 0x00, 0x53, 0x82, 0x03, 0xF8, 0x77, 0x82, 0x07, 0x01, 0x30, 0x82, 0x06, 0xFD, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x82, 0x06, 0xEE, 0x30, 0x82, 0x06, 0xEA, 0x02, 0x01, 0x03, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x3B, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0xA0, 0x82, 0x01, 0x2F, 0x04, 0x82, 0x01, 0x2B, 0x30, 0x82, 0x01, 0x27, 0x02, 0x01, 0x00, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x30, 0x82, 0x01, 0x11, 0x30, 0x25, 0x02, 0x01, 0x01, 0x04, 0x20, 0xF1, 0xB4, 0x91, 0x15, 0xC4, 0x98, 0x47, 0xF2, 0x52, 0x47, 0xF1, 0x5E, 0x11, 0xF7, 0xD4, 0xB3, 0x54, 0x5A, 0x8D, 0x55, 0x90, 0xB6, 0xDC, 0x94, 0x1B, 0xC5, 0xFF, 0xCF, 0x4E, 0x39, 0xF3, 0x7A, 0x30, 0x25, 0x02, 0x01, 0x02, 0x04, 0x20, 0xEF, 0x7A, 0x16, 0x97, 0x5E, 0x6F, 0xD6, 0xA0, 0x82, 0x80, 0x78, 0x17, 0x63, 0xAF, 0x49, 0xD4, 0x96, 0x16, 0xEC, 0x12, 0x58, 0xEC, 0x29, 0x1C, 0x06, 0x4B, 0x72, 0x6A, 0x8E, 0x30, 0x45, 0xDD, 0x30, 0x25, 0x02, 0x01, 0x03, 0x04, 0x20, 0xE5, 0xEC, 0x03, 0x0B, 0xCA, 0x7C, 0xB6, 0xE1, 0xD1, 0x13, 0x63, 0x36, 0xCE, 0x3C, 0x07, 0xA8, 0x18, 0x02, 0x04, 0x13, 0x86, 0xD0, 0x34, 0x4B, 0x1A, 0xE1, 0xC8, 0xD1, 0x0A, 0x26, 0x8E, 0x4E, 0x30, 0x25, 0x02, 0x01, 0x04, 0x04, 0x20, 0x5E, 0x02, 0xB1, 0x15, 0x6D, 0x54, 0x8B, 0xB8, 0x57, 0xC0, 0x23, 0xBF, 0xFF, 0x8C, 0x95, 0x99, 0xCB, 0x0A, 0x85, 0xF0, 0xF4, 0x3C, 0x00, 0xF1, 0xA7, 0xC6, 0x1E, 0x2A, 0x04, 0x71, 0xD4, 0x12, 0x30, 0x25, 0x02, 0x01, 0x05, 0x04, 0x20, 0x2A, 0x9B, 0x1F, 0x84, 0x1C, 0xAB, 0x5C, 0x7E, 0xBC, 0x53, 0xE4, 0x8B, 0x4B, 0x69, 0xF2, 0x7B, 0xDA, 0x3C, 0xC7, 0x2B, 0x45, 0x47, 0x28, 0x82, 0xE1, 0xCF, 0x86, 0xF2, 0x2A, 0xD4, 0x3D, 0xCD, 0x30, 0x25, 0x02, 0x01, 0x07, 0x04, 0x20, 0x3E, 0x9A, 0x80, 0x47, 0x3C, 0x42, 0xC1, 0x9F, 0x9C, 0x9F, 0x4D, 0x0C, 0xAB, 0x06, 0x9E, 0xB0, 0x1F, 0x24, 0x6C, 0xC4, 0xF5, 0x21, 0x13, 0x7D, 0x5F, 0x34, 0xA0, 0xD9, 0x8F, 0x20, 0xE6, 0x07, 0x30, 0x25, 0x02, 0x01, 0x0E, 0x04, 0x20, 0x01, 0x27, 0xD7, 0x48, 0xFE, 0xF7, 0x9A, 0xFB, 0xA1, 0x5F, 0x3A, 0x17, 0x8B, 0x11, 0x42, 0x3F, 0x85, 0x67, 0x51, 0x6D, 0x4A, 0x0B, 0xF3, 0x2B, 0x9C, 0xA2, 0x8D, 0xE2, 0x65, 0x59, 0x9D, 0x62, 0xA0, 0x82, 0x03, 0x6C, 0x30, 0x82, 0x03, 0x68, 0x30, 0x82, 0x02, 0x50, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x37, 0x31, 0x31, 0x31, 0x37, 0x31, 0x34, 0x33, 0x39, 0x35, 0x30, 0x5A, 0x30, 0x51, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x02, 0x44, 0x53, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xD4, 0x83, 0xCC, 0x47, 0xDF, 0x84, 0x5C, 0xC1, 0xF8, 0xB1, 0x59, 0x68, 0xC7, 0xA2, 0x4F, 0x15, 0xD1, 0x2C, 0xDD, 0xB3, 0x08, 0x73, 0x7F, 0x7A, 0xB1, 0x42, 0x3C, 0xF7, 0xE3, 0x49, 0x12, 0x50, 0xD7, 0xF6, 0xB7, 0xAF, 0x60, 0x85, 0xE0, 0xF6, 0xBE, 0xCA, 0x20, 0xFB, 0xEF, 0xAA, 0x3F, 0x98, 0xD9, 0x0C, 0x4F, 0xED, 0xCB, 0x27, 0xC3, 0x76, 0x81, 0x96, 0xE4, 0x7A, 0xC7, 0x5A, 0x98, 0x15, 0xC4, 0x53, 0xF9, 0xA6, 0xCF, 0xC7, 0xCD, 0xF4, 0x55, 0x15, 0x3B, 0x3A, 0xF0, 0x98, 0x19, 0xCD, 0x89, 0x66, 0x54, 0x19, 0x41, 0x1F, 0xB3, 0xE1, 0xDD, 0xDA, 0x95, 0xD9, 0x05, 0xB1, 0xD6, 0x51, 0x50, 0x71, 0x92, 0x40, 0x81, 0xE7, 0x74, 0x37, 0xF9, 0x5E, 0x40, 0xB6, 0x1A, 0x24, 0x73, 0x6D, 0x50, 0x2F, 0x5C, 0xCF, 0xF4, 0x61, 0x71, 0xFC, 0xEE, 0x41, 0x87, 0xD8, 0x88, 0xBD, 0xBB, 0x27, 0x21, 0x6B, 0x56, 0xA1, 0xAD, 0x19, 0xA2, 0x34, 0x51, 0x51, 0x6C, 0x8B, 0xE4, 0x59, 0x1D, 0xDC, 0x09, 0x8D, 0x28, 0x07, 0xF2, 0x36, 0xAA, 0x89, 0x63, 0x4E, 0x4D, 0x2F, 0x97, 0x21, 0x5E, 0xD1, 0x74, 0x60, 0xC6, 0x0A, 0xBE, 0xF4, 0x7C, 0xB4, 0x05, 0xB7, 0x27, 0x1B, 0xD8, 0x43, 0x84, 0x1C, 0x64, 0xF7, 0xED, 0x24, 0x47, 0x60, 0xEF, 0x11, 0x59, 0x38, 0xB9, 0xC6, 0x13, 0x43, 0xDE, 0xF4, 0x44, 0xE0, 0x35, 0x51, 0x72, 0x49, 0x69, 0x70, 0x55, 0xDD, 0x39, 0xDE, 0xC2, 0xAB, 0x70, 0x7A, 0xBD, 0x1C, 0xE5, 0x2F, 0xFE, 0xB3, 0xAE, 0x86, 0x4E, 0xB7, 0x82, 0xDB, 0x96, 0xEE, 0x7C, 0xE4, 0x0D, 0x2C, 0x6E, 0xB8, 0x22, 0x57, 0x08, 0xCE, 0xCC, 0x61, 0x68, 0x25, 0x1D, 0xEC, 0x5E, 0xE8, 0x05, 0x75, 0xC5, 0xE4, 0xB2, 0x2E, 0x02, 0xEE, 0x95, 0x7C, 0xBC, 0xEC, 0xD2, 0xF7, 0xE0, 0x3B, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x41, 0x30, 0x3F, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xE9, 0xC6, 0x0E, 0x7E, 0x1C, 0x9F, 0x55, 0x3D, 0x1C, 0xD3, 0x55, 0xA2, 0x33, 0xDC, 0x58, 0x73, 0x90, 0xCD, 0x2D, 0xA6, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x31, 0x8F, 0xF7, 0xAF, 0xD8, 0x19, 0x7C, 0xF1, 0x2E, 0x61, 0xC0, 0x5B, 0xF2, 0x7F, 0xA2, 0x64, 0xD1, 0x36, 0xC2, 0x1F, 0x98, 0x3D, 0x14, 0x06, 0x2B, 0x84 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, dgSOD1.ToArray()) != 0) { /*return -161;*/ }

                List<byte> dgSOD2 = new List<byte>();

                dgSOD2.AddRange(new byte[] { 0x54, 0x02, 0x03, 0xF8, 0x53, 0x82, 0x03, 0x0D, 0x3C, 0x3C, 0x8F, 0x92, 0xC1, 0x46, 0x9F, 0xB3, 0x9E, 0xC0, 0xF9, 0xAC, 0x60, 0xC3, 0x19, 0x6D, 0x4B, 0x4F, 0xD8, 0x43, 0x7B, 0xA7, 0xA7, 0x48, 0x33, 0x34, 0x26, 0xE6, 0x1E, 0x4B, 0xC1, 0xAE, 0xF8, 0x38, 0xA1, 0x6D, 0xEE, 0x03, 0xB7, 0xDF, 0xC0, 0xD4, 0xDE, 0xE8, 0x07, 0x26, 0xFB, 0x44, 0x51, 0x2F, 0x90, 0x7A, 0xA8, 0x6F, 0xCF, 0xA8, 0xA6, 0x42, 0x46, 0x02, 0x85, 0xF0, 0x7E, 0xB1, 0x41, 0xC7, 0xFE, 0xCA, 0xEB, 0x7E, 0xF9, 0xC8, 0x51, 0x31, 0x63, 0x5E, 0x87, 0x22, 0x00, 0xAA, 0x9A, 0x56, 0xAE, 0xD7, 0x41, 0x7C, 0x5C, 0x55, 0x43, 0x39, 0x44, 0xF2, 0x6E, 0xE5, 0x06, 0x5F, 0x19, 0x2E, 0x2E, 0xD9, 0x27, 0xA5, 0x73, 0x02, 0x00, 0x57, 0x4B, 0x1D, 0xE9, 0xC9, 0x64, 0x7A, 0x60, 0xE3, 0xD0, 0x49, 0x55, 0xEC, 0x56, 0x05, 0xBE, 0xC2, 0xB1, 0xF2, 0x31, 0x20, 0x48, 0xDE, 0xB2, 0xCC, 0x40, 0x9C, 0xF4, 0xC6, 0x61, 0xCB, 0xB0, 0x0D, 0x8A, 0x22, 0xB1, 0x69, 0xAA, 0xC5, 0xFF, 0x17, 0x8A, 0x75, 0x28, 0xCF, 0x48, 0xBE, 0x24, 0x99, 0x43, 0x10, 0x39, 0xE2, 0xF6, 0x4B, 0xCC, 0xF3, 0xF2, 0xF9, 0x32, 0x24, 0xD7, 0x1A, 0x6E, 0x58, 0x95, 0x9C, 0x19, 0x5F, 0xCD, 0x1B, 0x53, 0xCF, 0xE0, 0xD7, 0x11, 0xC1, 0x7F, 0x0F, 0x0C, 0xAC, 0x09, 0xB0, 0x3E, 0x15, 0x76, 0xFA, 0x86, 0xDD, 0x7D, 0xB1, 0x6E, 0xB8, 0x36, 0xA3, 0x48, 0x31, 0x5D, 0x23, 0xE3, 0xAA, 0xC8, 0x54, 0x59, 0x00, 0x97, 0x25, 0xA6, 0x02, 0x7F, 0xA3, 0x25, 0xFC, 0xDD, 0x43, 0x99, 0xF0, 0x78, 0xFC, 0x14, 0xCC, 0xA2, 0xB5, 0xB7, 0xBF, 0x31, 0x82, 0x02, 0x23, 0x30, 0x82, 0x02, 0x1F, 0x02, 0x01, 0x01, 0x30, 0x60, 0x30, 0x53, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x12, 0x4E, 0x58, 0x50, 0x20, 0x53, 0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0F, 0x53, 0x49, 0x53, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x6D, 0x65, 0x6E, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x43, 0x53, 0x43, 0x41, 0x02, 0x09, 0x00, 0xB0, 0x9B, 0xD5, 0x35, 0x00, 0x31, 0x8B, 0xB3, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA0, 0x81, 0x95, 0x30, 0x15, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x03, 0x31, 0x08, 0x06, 0x06, 0x67, 0x81, 0x08, 0x01, 0x01, 0x01, 0x30, 0x1C, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x05, 0x31, 0x0F, 0x17, 0x0D, 0x31, 0x37, 0x30, 0x36, 0x32, 0x39, 0x30, 0x37, 0x32, 0x30, 0x33, 0x39, 0x5A, 0x30, 0x2D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x34, 0x31, 0x20, 0x30, 0x1E, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xA1, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x30, 0x2F, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x04, 0x31, 0x22, 0x04, 0x20, 0xA8, 0xDB, 0x0F, 0x33, 0x29, 0x1F, 0x3A, 0x2B, 0x29, 0xB8, 0x02, 0xA5, 0xCD, 0xA2, 0x39, 0xFB, 0x38, 0x26, 0x01, 0x0B, 0xA6, 0x2E, 0x93, 0x06, 0x90, 0xB2, 0xA1, 0x05, 0x2C, 0x08, 0x2C, 0x93, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x01, 0x00, 0xC6, 0x76, 0x3B, 0x16, 0xC3, 0xD3, 0x34, 0x38, 0xCB, 0x1E, 0x1D, 0x3A, 0xD9, 0x95, 0x35, 0xDD, 0x85, 0x16, 0x34, 0x51, 0x98, 0x9A, 0xD6, 0x31, 0x61, 0xBF, 0x35, 0x59, 0xB8, 0x42, 0x68, 0x60, 0x40, 0xD3, 0x72, 0xDC, 0x06, 0xAC, 0x62, 0x47, 0xDF, 0xCC, 0xC4, 0x9F, 0xC9, 0x7E, 0xED, 0x41, 0x4A, 0x30, 0x68, 0x57, 0x6E, 0x70, 0x63, 0xC9, 0x7C, 0xA3, 0x89, 0x63, 0x0C, 0x15, 0x63, 0xA8, 0xE8, 0x1F, 0x9C, 0x48, 0xD1, 0x0B, 0x0F, 0x11, 0xE9, 0x80, 0x79, 0xF2, 0x6E, 0xE4, 0x8C, 0x36, 0xBE, 0xD1, 0xE1, 0xB0, 0x32, 0xA3, 0x8C, 0x07, 0x1C, 0x63, 0x4D, 0xD7, 0x68, 0x42, 0x75, 0x65, 0xDA, 0xF9, 0x2B, 0xE0, 0xE4, 0xFE, 0x98, 0x8D, 0x99, 0xAC, 0xD7, 0x48, 0xBB, 0x28, 0xD8, 0x2E, 0xD2, 0x71, 0x41, 0xAD, 0xDF, 0x39, 0xF8, 0xC4, 0xF9, 0xC5, 0xDE, 0xA9, 0xED, 0x84, 0x1F, 0x44, 0x64, 0x8E, 0x22, 0xBF, 0x31, 0xB1, 0x29, 0x59, 0x4D, 0xD8, 0x9D, 0x5B, 0xF2, 0x16, 0x6D, 0x97, 0xEB, 0x84, 0x9D, 0xAA, 0x44, 0x02, 0x2C, 0x8E, 0x49, 0x3F, 0xB9, 0x30, 0x04, 0x72, 0x2E, 0xCE, 0x69, 0x84, 0x8A, 0xA7, 0x42, 0x65, 0xC8, 0x7E, 0x7B, 0x63, 0x06, 0x8A, 0x76, 0x73, 0x4D, 0xE6, 0x43, 0x20, 0xF0, 0x35, 0x09, 0x53, 0x72, 0x3C, 0x60, 0xD1, 0x33, 0x66, 0x71, 0xF3, 0xF2, 0x8D, 0xB9, 0x69, 0x30, 0x83, 0x0E, 0x83, 0xDC, 0x4C, 0xC4, 0xB9, 0x3B, 0x29, 0xA2, 0xEC, 0xF2, 0x1D, 0xCC, 0xD2, 0x4F, 0xCD, 0xE0, 0x54, 0x59, 0x6B, 0xA3, 0xFA, 0xE7, 0x80, 0x6B, 0x3A, 0xD8, 0x94, 0x7D, 0x39, 0x4C, 0x6F, 0xA8, 0x33, 0xAD, 0x21, 0x33, 0x63, 0xE2, 0xCB, 0x5E, 0xBB, 0xD1, 0x35, 0x1A, 0x72, 0xE5, 0xE5, 0x3F, 0x10, 0xDF, 0x2F, 0x7C, 0xC1, 0x6C, 0x4B, 0x1C, 0x55, 0x25, 0x77 });

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, dgSOD2.ToArray()) != 0) { /*return -162;*/ }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }

                sc.InstallAppletV5();
            }
            catch (Exception ex)
            {
                sc.InstallAppletV3();

                return -101;
            }

            return 0;
        }


        private byte[] Int2ByteArray82(int val)
        {
            int intValue = val;
            byte[] intBytes = BitConverter.GetBytes(intValue);
            Array.Reverse(intBytes);
            byte[] result = intBytes;

            List<byte> ll = new List<byte>();

            ll.Add(0x82);
            //ll.Add(result[1]);
            ll.Add(result[2]);
            ll.Add(result[3]);

            return ll.ToArray();
        }

        private byte[] Int2ByteArray(int val)
        {
            int intValue = val;
            byte[] intBytes = BitConverter.GetBytes(intValue);
            Array.Reverse(intBytes);
            byte[] result = intBytes;

            List<byte> ll = new List<byte>();

            //ll.Add(result[1]);
            ll.Add(result[2]);
            ll.Add(result[3]);

            return ll.ToArray();
        }

        private int InsertBigDataPhoto(byte[] data)
        {

            int dataLength = 1016;

            int totalLength = data.Length;

            int iterationLen = totalLength / dataLength;

            List<byte> tempList = new List<byte>();

            for (int i =0; i<= iterationLen; i++)
            {
                tempList.Clear();

                iCard.Disconnect(DISCONNECT.Reset);

                Connect2Card();

                if (i==0)
                {
                    tempList.Add(0x54);
                    tempList.Add(0x01);
                    tempList.Add(0x00);
                }
                else
                {
                    tempList.Add(0x54);
                    tempList.Add(0x02);

                    int currpos = i * dataLength;

                    var curposbyte = Int2ByteArray(currpos);

                    tempList.AddRange(curposbyte);
                }

                tempList.Add(0x53);
                tempList.AddRange(Int2ByteArray82(dataLength));

                byte[] tempSend = new byte[dataLength];

                if (i==0)
                {
                    Array.Copy(data, 0, tempSend, 0, dataLength);
                }
                else if (i == iterationLen)
                {
                    Array.Copy(data, i * dataLength , tempSend, 0, totalLength - i * dataLength);
                }
                else
                {
                    Array.Copy(data, i* dataLength , tempSend, 0, dataLength);
                }

                tempList.AddRange(tempSend);

                var ResultinStr = ByteArrayToString(tempList.ToArray());

                try
                {
                    if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x04, tempList.ToArray()) != 0) { return -45; }
                }
                catch(Exception)
                {
                    iCard.Disconnect(DISCONNECT.Reset);

                    Connect2Card();

                    if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x04, tempList.ToArray()) != 0) { return -45; }
                }

            }

            return 0;
        }

        private int InsertBigDataSignature(byte[] data)
        {

            int dataLength = 1016;

            int totalLength = data.Length;

            int iterationLen = totalLength / dataLength;

            List<byte> tempList = new List<byte>();

            for (int i = 0; i <= iterationLen; i++)
            {
                tempList.Clear();

                iCard.Disconnect(DISCONNECT.Reset);

                Connect2Card();

                if (i == 0)
                {
                    tempList.Add(0x54);
                    tempList.Add(0x01);
                    tempList.Add(0x00);
                }
                else
                {
                    tempList.Add(0x54);
                    tempList.Add(0x02);

                    int currpos = i * dataLength;

                    var curposbyte = Int2ByteArray(currpos);

                    tempList.AddRange(curposbyte);
                }

                tempList.Add(0x53);
                tempList.AddRange(Int2ByteArray82(dataLength));

                byte[] tempSend = new byte[dataLength];

                if (i == 0)
                {
                    if (dataLength > data.Length)
                    {
                        Array.Copy(data, 0, tempSend, 0, data.Length);
                    }
                    else
                    {
                        Array.Copy(data, 0, tempSend, 0, dataLength);
                    }
                    
                }
                else if (i == iterationLen)
                {
                    Array.Copy(data, i * dataLength, tempSend, 0, totalLength - i * dataLength);
                }
                else
                {
                    Array.Copy(data, i * dataLength, tempSend, 0, dataLength);
                }

                tempList.AddRange(tempSend);

                var ResultinStr = ByteArrayToString(tempList.ToArray());

                try
                {
                    if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, tempList.ToArray()) != 0) { return -46; }
                }
                catch (Exception)
                {
                    iCard.Disconnect(DISCONNECT.Reset);

                    Connect2Card();

                    if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, tempList.ToArray()) != 0) { return -46; }
                }

            }

            return 0;
        }

        private int InsertBigDataSignatureOld(byte[] data)
        {

            int dataLength = 1016;

            int totalLength = data.Length;

            int iterationLen = totalLength / dataLength;

            List<byte> tempList = new List<byte>();

            for (int i = 0; i <= iterationLen; i++)
            {
                tempList.Clear();

                iCard.Disconnect(DISCONNECT.Reset);

                Connect2Card();

                if (i == 0)
                {
                    tempList.Add(0x54);
                    tempList.Add(0x01);
                    tempList.Add(0x00);
                }
                else
                {
                    tempList.Add(0x54);
                    tempList.Add(0x02);

                    if (i == iterationLen)
                    {
                        int currpos = i * dataLength;

                        var curposbyte = Int2ByteArray(currpos);

                        tempList.AddRange(curposbyte);
                    }
                    else
                    {
                        int currpos = i * dataLength;

                        var curposbyte = Int2ByteArray(currpos);

                        tempList.AddRange(curposbyte);
                    }

                }

                tempList.Add(0x53);
                
                int bufferLen = 0;

                if (i == iterationLen)
                {
                    bufferLen = totalLength - i * dataLength; //totalLength - i * dataLength;

                    if (bufferLen > 255)
                    {
                        tempList.AddRange(Int2ByteArray82(bufferLen));
                    }
                    else
                    {
                        tempList.Add((byte)bufferLen);
                    }
                    
                }
                else
                {
                    bufferLen = dataLength;
                    tempList.AddRange(Int2ByteArray82(bufferLen));
                }

                byte[] tempSend = new byte[bufferLen];

                if (i == 0)
                {
                    Array.Copy(data, 0, tempSend, 0, dataLength);
                }
                else if (i == iterationLen)
                {
                    Array.Copy(data, i * dataLength , tempSend, 0, totalLength - i * dataLength);
                }
                else
                {
                    Array.Copy(data, i * dataLength , tempSend, 0, dataLength);
                }

                tempList.AddRange(tempSend);

                var ResultinStr = ByteArrayToString(tempList.ToArray());

                try
                {
                    var DG5HexStr = ByteArrayToString(tempList.ToArray());

                    if (tempList.Count > 255)
                    {
                        if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, tempList.ToArray()) != 0)
                        {
                            return -45;
                        }
                    }
                    else
                    {
                        if (CallApduCommand(0x00, 0xD7, 0x00, 0x05, tempList.ToArray()) != 0) { return -45; }
                    }

                }
                catch (Exception)
                {
                    iCard.Disconnect(DISCONNECT.Reset);

                    Connect2Card();

                    if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x05, tempList.ToArray()) != 0) { return -45; }
                }

            }

            return 0;
        }

        private string ByteArrayToString(byte[] ba)
        {
            string hex = BitConverter.ToString(ba);
            return hex.Replace("-", "");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="DG1"></param>
        /// <param name="DG2"></param>
        /// <param name="DG3"></param>
        /// <param name="DG4"></param>
        /// <param name="DG5"></param>
        /// <param name="DGCommon"></param>
        /// <returns></returns>
        public int SaveeVr2Card(byte[] VehicleObject)
        {
            log.Info("SaveIDL2Card");

            try
            {
                Connect2Card();


                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x47, 0x10, 0x01 }, 28) != 0)
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0)
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[22] { 0x83, 0x02, 0x20, 0x01, 0x8F, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[22] { 0x83, 0x02, 0x20, 0x03, 0x8F, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0xD6, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x91, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x42, 0x68, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    //return -12;
                //}


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x13, 0x88, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    //return -13;
                //}



                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -14;
                }

                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x47, 0x10, 0x01 }, 28) != 0) { return -18; }

                /*
                 *      # WriteBACKeys
                        # WriteDESKeys
                 */
                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, new byte[44] { 0x70, 0x2A, 0xBF, 0x0A, 0x21, 0x26, 0xA2, 0x24, 0x90, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x91, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }, 0) != 0) { return -18; }

                /*
                 *  # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                 * 
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9 }) != 0) { return -21; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x0E, VehicleObject) != 0) { return -50; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }
            }
            catch (Exception)
            {

            }

            return 0;
        }


        public int SaveeVr2Card2(byte[] VehicleObject)
        {
            log.Info("SaveIDL2Card");

            try
            {
                Connect2Card();


                //SendApdu: ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x47, 0x10, 0x02 }, 28) != 0)
                {
                    return -1;
                }

                /*
                 *  # CreateBACKeys
                    # CreateDESKeys
                    # CreateKeyObjectSymm
                    # SendApdu: CV.CreateObject
                */
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[23] { 0x62, 0x15, 0x82, 0x02, 0x10, 0x64, 0x83, 0x02, 0x0A, 0x21, 0x86, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x01, 0x00, 0x9B, 0x01, 0x00 }) != 0)
                {
                    return -2;
                }

                //CV.Perosnalization BAP keys K enc
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[22] { 0x83, 0x02, 0x20, 0x01, 0x8F, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }) != 0)
                {
                    return -3;
                }

                //CV.Perosnalization BAP keys MAC
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[22] { 0x83, 0x02, 0x20, 0x03, 0x8F, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }) != 0)
                {
                    return -4;
                }

                //# CreateAuthenticationObjectAOSec
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x06, new byte[23] { 0x62, 0x15, 0x82, 0x0C, 0x10, 0x43, 0x06, 0xF3, 0xB4, 0x30, 0x00, 0x21, 0xB8, 0x30, 0x00, 0x21, 0x83, 0x02, 0x01, 0x21, 0x86, 0x01, 0x0D }) != 0)
                {
                    return -5;
                }

                //# PrePersonalizeEAP
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[25] { 0x62, 0x17, 0x80, 0x02, 0x01, 0x00, 0x82, 0x02, 0x10, 0x59, 0x83, 0x02, 0x2A, 0x30, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x01, 0x00 }) != 0)
                {
                    return -6;
                }

                /*
                 *# CreateKeyObjectAsymm
                  # TLVList
                  # SendApdu: CV.CreateObject
                 */
                //CV.CreateObject
                if (CallApduCommand(0x80, 0xE0, 0x00, 0x07, new byte[22] { 0x62, 0x14, 0x80, 0x02, 0x00, 0xE0, 0x82, 0x02, 0x10, 0x5A, 0x83, 0x02, 0x2A, 0xB0, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }) != 0)
                {
                    return -7;
                }

                //CV.StoreData
                if (CallApduCommand(0x80, 0xE2, 0x00, 0x00, new byte[2] { 0xDF, 0xB0 }) != 0)
                {
                    return -8;
                }

                /*
                 *  # PrePersonalizeIDLDGs
                    # Create ICAO DG1
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0xD6, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x01, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x08, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -9;
                }


                /*
                 *  # Create IDL DG2
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x91, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x02, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x10, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -10;
                }

                /*
                 *  # Create IDL DG3
                 *  # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x27, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x03, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x18, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -11;
                }


                /*
                 *  # Create IDL DG4
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x5D, 0xE9, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x04, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x20, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    //return -12;
                //}


                /*
                 *  # Create IDL DG5
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x05, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x28, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    //return -13;
                //}



                /*
                    # Create IDL DG7
                    # CreateFile
                 */
                //ISO7816.CreateFile
                //if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x0B, 0x63, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x07, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x38, 0x8A, 0x01, 0x05 }) != 0)
                //{
                //    return -14;
                //}

                /*
                 *  # Create IDL DG14
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x15, 0x0D, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x0E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0x70, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -15;
                }

                /*
                 *  # Create IDL COM
                    # CreateFile
                 */
                //ISO7816.CreateFile
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x00, 0x5E, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1E, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xF0, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -16;
                }

                //ISO7816.CreateFile SOD
                if (CallApduCommand(0x00, 0xE0, 0x00, 0x00, new byte[23] { 0x62, 0x15, 0x80, 0x02, 0x07, 0x05, 0x82, 0x01, 0x01, 0x83, 0x02, 0x00, 0x1D, 0x86, 0x02, 0x00, 0x00, 0x88, 0x01, 0xE8, 0x8A, 0x01, 0x05 }) != 0)
                {
                    return -17;
                }

                //ISO7816.SelectFileByDFName
                if (CallApduCommandLe(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x47, 0x10, 0x02 }, 28) != 0) { return -18; }

                /*
                 *      # WriteBACKeys
                        # WriteDESKeys
                 */
                if (CallApduCommandLe(0x00, 0xDB, 0x3F, 0xFF, new byte[44] { 0x70, 0x2A, 0xBF, 0x0A, 0x21, 0x26, 0xA2, 0x24, 0x90, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x91, 0x10, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F }, 0) != 0) { return -18; }

                /*
                 *  # PersonalizeEAP
                    # SendApdu: CV.SelectObject
                 */
                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0x30 }) != 0) { return -19; }

                /*
                 * 
                 */
                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28, 0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77 }) != 0) { return -20; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x20, 0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9 }) != 0) { return -21; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x20, 0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE, 0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6 }) != 0) { return -22; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[71] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x41, 0x04, 0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2, 0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62, 0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54, 0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97 }) != 0) { return -23; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x20, 0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7, 0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7 }) != 0) { return -24; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -25; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x00, 0x80, 0x8F, 0x01, 0x00 }) != 0) { return -26; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[38] { 0x83, 0x02, 0x28, 0x01, 0x8F, 0x20, 0x5E, 0xE4, 0x6A, 0xDD, 0xCC, 0x23, 0xF3, 0x7D, 0xFD, 0x08, 0x78, 0x7A, 0xD7, 0x87, 0x36, 0x82, 0xE3, 0x06, 0x43, 0x53, 0xDA, 0xF7, 0x54, 0x62, 0xCF, 0x83, 0x2E, 0x18, 0x74, 0xF8, 0x7C, 0xAE }) != 0) { return -27; }

                if (CallApduCommand(0x80, 0xA4, 0x00, 0x07, new byte[02] { 0x2A, 0xB0 }) != 0) { return -28; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x21, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1, 0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97, 0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF }) != 0) { return -29; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x22, 0x01, 0x8F, 0x1C, 0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C, 0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53, 0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0, 0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43 }) != 0) { return -30; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x23, 0x01, 0x8F, 0x1C, 0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41, 0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23, 0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66, 0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B }) != 0) { return -31; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x24, 0x01, 0x8F, 0x39, 0x04, 0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C, 0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D, 0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C, 0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D, 0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72, 0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD, 0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA, 0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD }) != 0) { return -32; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[34] { 0x83, 0x02, 0x25, 0x01, 0x8F, 0x1C, 0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66, 0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0, 0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D, 0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F }) != 0) { return -33; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[07] { 0x83, 0x02, 0x26, 0x01, 0x8F, 0x01, 0x01 }) != 0) { return -34; }

                if (CallApduCommand(0x80, 0xDA, 0x01, 0x6E, new byte[63] { 0x83, 0x02, 0x27, 0x01, 0x8F, 0x39, 0x04, 0x48, 0x84, 0xDA, 0x55, 0x88, 0x06, 0x6F, 0x6B, 0xA1, 0x05, 0x60, 0xC9, 0x40, 0x60, 0xCD, 0xB6, 0xAB, 0xC6, 0x20, 0xD4, 0x71, 0x49, 0x8E, 0xF6, 0xBC, 0x9C, 0x1A, 0xE6, 0x48, 0x98, 0x73, 0xE0, 0x95, 0xBC, 0xE2, 0x5A, 0x5C, 0xB7, 0xF8, 0xFD, 0x7B, 0x97, 0xAC, 0x1A, 0x88, 0xD9, 0x37, 0x02, 0xCC, 0xF6, 0x18, 0x52, 0xEB, 0x9E, 0xCB, 0xAA }) != 0) { return -35; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x01, new byte[03] { 0xDF, 0xBB, 0x25 }) != 0) { return -36; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x02, new byte[17] { 0xDF, 0xB9, 0x41, 0x54, 0x43, 0x56, 0x43, 0x41, 0x5F, 0x4E, 0x58, 0x50, 0x30, 0x30, 0x30, 0x30, 0x31 }) != 0) { return -37; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x03, new byte[06] { 0xDF, 0xBA, 0x3F, 0xFF, 0xFF, 0xFF }) != 0) { return -38; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x04, new byte[08] { 0xDF, 0xBD, 0x01, 0x08, 0x00, 0x06, 0x02, 0x04 }) != 0) { return -39; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x05, new byte[12] { 0xDF, 0x11, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x58 }) != 0) { return -40; }

                if (CallApduCommand(0x80, 0xE2, 0x00, 0x06, new byte[08] { 0xDF, 0x12, 0x01, 0x05, 0x00, 0x06, 0x02, 0x03 }) != 0) { return -41; }

                if (CallApduCommandImage(0x00, 0xD7, 0x00, 0x0E, VehicleObject) != 0) { return -50; }

                if (CallApduCommandLe(0x80, 0xE2, 0x80, 0x00, new byte[05] { 0x98, 0x02, 0x00, 0x33, 0x01 }, 2) != 0) { return -47; }
            }
            catch (Exception)
            {

            }

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Cla"></param>
        /// <param name="Ins"></param>
        /// <param name="P1"></param>
        /// <param name="P2"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        private int CallApduCommand(byte Cla, byte Ins, byte P1, byte P2, byte [] data)
        {
            APDUCommand apduSize5 = new APDUCommand(Cla, Ins, P1, P2, null, 0);

            APDUParam apduParam5 = new APDUParam();

            apduParam5.Data = data;

            apduSize5.Update(apduParam5);

            log.Info(apduSize5.ToString());

            apduResp = iCard.Transmit(apduSize5);
            if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
            {

                log.Info(apduResp.ToString());

                return -1;
            }

            log.Info(apduResp.Status);
            log.Info(apduResp.ToString());

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Cla"></param>
        /// <param name="Ins"></param>
        /// <param name="P1"></param>
        /// <param name="P2"></param>
        /// <param name="data"></param>
        /// <param name="_recieveLength"></param>
        /// <returns></returns>
        private int CallApduCommandLe(byte Cla, byte Ins, byte P1, byte P2, byte[] data, uint _recieveLength)
        {
            APDUCommand apduSize5 = new APDUCommand(Cla, Ins, P1, P2, null, 0);

            APDUParam apduParam5 = new APDUParam();

            apduParam5.Data = data;

            apduSize5.Update(apduParam5);

            log.Info(apduSize5.ToString());

            apduResp = iCard.TransmitLe(apduSize5, _recieveLength);
            if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
            {

                log.Info(apduResp.ToString());

                return -1;
            }

            log.Info(apduResp.Status);
            log.Info(apduResp.ToString());

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Cla"></param>
        /// <param name="Ins"></param>
        /// <param name="P1"></param>
        /// <param name="P2"></param>
        /// <param name="data"></param>
        /// <param name="_recieveLength"></param>
        /// <returns></returns>
        private byte[] CallApduCommandLeData(byte Cla, byte Ins, byte P1, byte P2, byte[] data, uint _recieveLength)
        {
            APDUCommand apduSize5 = new APDUCommand(Cla, Ins, P1, P2, null, 0);

            APDUParam apduParam5 = new APDUParam();

            apduParam5.Data = data;

            apduSize5.Update(apduParam5);

            log.Info(apduSize5.ToString());

            apduResp = iCard.TransmitLe(apduSize5, _recieveLength);
            if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING && apduResp.Status != SC_FileEnd)
            {

                log.Info(apduResp.ToString());

                return null;
            }

            log.Info(apduResp.Status);
            log.Info(apduResp.ToString());

            return apduResp.Data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Cla"></param>
        /// <param name="Ins"></param>
        /// <param name="P1"></param>
        /// <param name="P2"></param>
        /// <param name="data"></param>
        /// <param name="_recieveLength"></param>
        /// <returns></returns>
        private byte[] CallApduCommandLeImageData(byte Cla, byte Ins, byte P1, byte P2, byte[] data, uint _recieveLength)
        {
            APDUCommand apduSize5 = new APDUCommand(Cla, Ins, P1, P2, null, 0);

            APDUParam apduParam5 = new APDUParam();

            apduParam5.Data = data;

            apduSize5.Update(apduParam5);

            log.Info(apduSize5.ToString());

            apduResp = iCard.TransmitImageLe(apduSize5, _recieveLength);
            if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING && apduResp.Status != SC_FileEnd)
            {

                log.Info(apduResp.ToString());

                return null;
            }

            log.Info(apduResp.Status);
            log.Info(apduResp.ToString());

            return apduResp.Data;
        }
        //TransmitImageLe

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Cla"></param>
        /// <param name="Ins"></param>
        /// <param name="P1"></param>
        /// <param name="P2"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        private int CallApduCommandImage(byte Cla, byte Ins, byte P1, byte P2, byte[] data)
        {
            APDUCommand apduSize5 = new APDUCommand(Cla, Ins, P1, P2, null, 0);

            APDUParam apduParam5 = new APDUParam();

            apduParam5.Data = data;

            apduSize5.Update(apduParam5);

            log.Info(apduSize5.ToString());

            apduResp = iCard.TransmitImage(apduSize5);
            if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
            {

                log.Info(apduResp.ToString());

                return -1;
            }

            log.Info(apduResp.Status);
            log.Info(apduResp.ToString());

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public int ReadIDLCard(ref byte[] DG1, ref byte[] DG2, ref byte[] DG3, ref byte[] DG4, ref byte[] DG5, ref byte[] DGCommon)
        {
            log.Info("ReadIDLCard");

            try
            {
                Connect2Card();

                var retValApplet = CallApduCommandLeData(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x00 }, 28);

                if (retValApplet == null)
                {
                    return -1;
                }
                else
                {
                    //Do Some Action
                }

                #region DG1
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x01 }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 256);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        DG1 = retValFileDG1Val;
                    }
                }
                #endregion


                #region DG2
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x02 }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 256);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        DG2 = retValFileDG1Val;
                    }
                }
                #endregion


                #region DG3
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x03 }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 256);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        DG3 = retValFileDG1Val;
                    }
                }
                #endregion


                #region DG4
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x04 }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeImageData(0x00, 0xB0, 0x00, 0x00, null, 20000);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        DG4 = retValFileDG1Val;
                    }
                }
                #endregion


                #region DG5
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x05 }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeImageData(0x00, 0xB0, 0x00, 0x00, null, 20000);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        DG5 = retValFileDG1Val;
                    }
                }
                #endregion


                #region DG Common
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x1E }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 255);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        DGCommon = retValFileDG1Val;
                    }
                }
                #endregion

            }
            catch (Exception)
            {

            }


            return 0;
        }

        public int ReadIDLCardNext(ref byte[] DG1, ref byte[] DG2, ref byte[] DG3, ref byte[] DG4, ref byte[] DG5, ref byte[] DGCommon)
        {
            log.Info("ReadIDLCard");

            try
            {
                #region Old_Code
                //Connect2Card();

                //var retValApplet = CallApduCommandLeData(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x48, 0x02, 0x01 }, 28);

                //if (retValApplet == null)
                //{
                //    return -1;
                //}
                //else
                //{
                //    //Do Some Action
                //}

                //#region DG1
                //{
                //    byte[] FileLength = new byte[2];

                //    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x01 }, 23);

                //    if (retValFileDG1Param == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        FileLength[0] = retValFileDG1Param[8];
                //        FileLength[1] = retValFileDG1Param[9];

                //        //Do Convertion to int
                //    }

                //    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 256);

                //    if (retValFileDG1Val == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        DG1 = retValFileDG1Val;
                //    }
                //}
                //#endregion


                //#region DG2
                //{
                //    byte[] FileLength = new byte[2];

                //    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x02 }, 23);

                //    if (retValFileDG1Param == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        FileLength[0] = retValFileDG1Param[8];
                //        FileLength[1] = retValFileDG1Param[9];

                //        //Do Convertion to int
                //    }

                //    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 256);

                //    if (retValFileDG1Val == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        DG2 = retValFileDG1Val;
                //    }
                //}
                //#endregion


                //#region DG3
                //{
                //    byte[] FileLength = new byte[2];

                //    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x03 }, 23);

                //    if (retValFileDG1Param == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        FileLength[0] = retValFileDG1Param[8];
                //        FileLength[1] = retValFileDG1Param[9];

                //        //Do Convertion to int
                //    }

                //    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 256);

                //    if (retValFileDG1Val == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        DG3 = retValFileDG1Val;
                //    }
                //}
                //#endregion


                //#region DG4
                //{
                //    byte[] FileLength = new byte[2];

                //    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x04 }, 23);

                //    if (retValFileDG1Param == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        FileLength[0] = retValFileDG1Param[8];
                //        FileLength[1] = retValFileDG1Param[9];

                //        //Do Convertion to int
                //    }

                //    var retValFileDG1Val = CallApduCommandLeImageData(0x00, 0xB0, 0x00, 0x00, null, 20000);

                //    if (retValFileDG1Val == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        DG4 = retValFileDG1Val;
                //    }
                //}
                //#endregion


                //#region DG5
                //{
                //    byte[] FileLength = new byte[2];

                //    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x05 }, 23);

                //    if (retValFileDG1Param == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        FileLength[0] = retValFileDG1Param[8];
                //        FileLength[1] = retValFileDG1Param[9];

                //        //Do Convertion to int
                //    }

                //    var retValFileDG1Val = CallApduCommandLeImageData(0x00, 0xB0, 0x00, 0x00, null, 20000);

                //    if (retValFileDG1Val == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        DG5 = retValFileDG1Val;
                //    }
                //}
                //#endregion


                //#region DG Common
                //{
                //    byte[] FileLength = new byte[2];

                //    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x1E }, 23);

                //    if (retValFileDG1Param == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        FileLength[0] = retValFileDG1Param[8];
                //        FileLength[1] = retValFileDG1Param[9];

                //        //Do Convertion to int
                //    }

                //    var retValFileDG1Val = CallApduCommandLeData(0x00, 0xB0, 0x00, 0x00, null, 255);

                //    if (retValFileDG1Val == null)
                //    {
                //        return -1;
                //    }
                //    else
                //    {
                //        DGCommon = retValFileDG1Val;
                //    }
                //}
                //#endregion
                #endregion

                SecuredReaderTest dd = new SecuredReaderTest();

                //1

                DG1 = dd.IDL_ReaderDG1("123456");
                DG2 = dd.IDL_ReaderDG2("123456");

                DG4 = dd.IDL_ReaderDG4("123456");
                DG5 = dd.IDL_ReaderDG5("123456");

            }
            catch (Exception)
            {

            }


            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="VrBytes"></param>
        /// <returns></returns>
        public int ReadVRCard(ref byte[] VrBytes)
        {
            log.Info("ReadVrCard");

            try
            {
                Connect2Card();

                var retValApplet = CallApduCommandLeData(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x47, 0x10, 0x01 }, 28);

                if (retValApplet == null)
                {
                    return -1;
                }
                else
                {
                    //Do Some Action
                }

                #region VR
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x0E }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeImageData(0x00, 0xB0, 0x00, 0x00, null, 1024);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        VrBytes = retValFileDG1Val;
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {

            }

            return 0;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="VrBytes"></param>
        /// <returns></returns>
        public int ReadVRCardNext(ref byte[] VrBytes)
        {
            log.Info("ReadVrCard");

            try
            {
                Connect2Card();

                var retValApplet = CallApduCommandLeData(0x00, 0xA4, 0x04, 0x00, new byte[07] { 0xA0, 0x00, 0x00, 0x02, 0x47, 0x10, 0x02 }, 28);

                if (retValApplet == null)
                {
                    return -1;
                }
                else
                {
                    //Do Some Action
                }

                #region VR
                {
                    byte[] FileLength = new byte[2];

                    var retValFileDG1Param = CallApduCommandLeData(0x00, 0xA4, 0x02, 0x00, new byte[02] { 0x00, 0x0E }, 23);

                    if (retValFileDG1Param == null)
                    {
                        return -1;
                    }
                    else
                    {
                        FileLength[0] = retValFileDG1Param[8];
                        FileLength[1] = retValFileDG1Param[9];

                        //Do Convertion to int
                    }

                    var retValFileDG1Val = CallApduCommandLeImageData(0x00, 0xB0, 0x00, 0x00, null, 1024);

                    if (retValFileDG1Val == null)
                    {
                        return -1;
                    }
                    else
                    {
                        VrBytes = retValFileDG1Val;
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {

            }

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="uuid"></param>
        /// <returns></returns>
        public int ReadUniqueId(ref byte[] uuid)
        {
            log.Info("ReadUniqueId");

            try
            {
                Connect2Card();

                var retValFileDG1Val = CallApduCommandLeData(0xFF, 0xCA, 0x00, 0x00, null, 4);

                if (retValFileDG1Val == null)
                {
                    return -1;
                }
                else
                {
                    uuid = retValFileDG1Val;
                }
            }
            catch(Exception ex)
            {

            }

            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="mode"></param>
        /// <returns></returns>
        public int RepaireCardCommands(CardFactoryMode mode)
        {
            bool preApdu = false;

            log.Info("OpenCardCommands");

             log.Info(mode.ToString());

            try
            {
                Connect2Card();

                {
                    //00A4040010 D0AD565FDA50C053BD610BAB5F711072
                    log.Info("00 A4 04 00 [10] D0 AD 56 5F DA 50 C0 53 BD 61 0B AB 5F 71 10 72 [00]");
                    #region 00 A4 04 00 [10] D0 AD 56 5F DA 50 C0 53 BD 61 0B AB 5F 71 10 72 [00]
                    APDUCommand apduSize = new APDUCommand(0x00, 0xA4, 0x04, 0x00, null, 0);

                    APDUParam apduParam = new APDUParam();

                    apduParam.Data = new byte[16] { 0xD0, 0xAD, 0x56, 0x5F, 0xDA, 0x50, 0xC0, 0x53, 0xBD, 0x61, 0x0B, 0xAB, 0x5F, 0x71, 0x10, 0x72 };

                    apduSize.Update(apduParam);

                    apduResp = iCard.TransmitLe(apduSize);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        if (apduResp.ToString().Contains("6A82"))
                        {
                            preApdu = true;
                        }

                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        //return -1;
                    }

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());

                    Thread.Sleep(100);

                    #endregion
                }

                if (!preApdu)
                {
                    {
                        log.Info("00 F0 00 00");
                        #region 00 F0 00 00
                        APDUCommand apduSize2 = new APDUCommand(0x00, 0xF0, 0x00, 0x00, null, 0);

                        apduResp = iCard.Transmit(apduSize2);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -2;
                        }

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());

                        #endregion
                    }

                    {
                        log.Info("C0 B0 05 B6 [10]");
                        #region C0 B0 05 B6 [10]
                        APDUCommand apduSize2_1 = new APDUCommand(0xC0, 0xB0, 0x05, 0xB6, null, 10);

                        apduResp = iCard.Transmit(apduSize2_1);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -3;
                        }
                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 D6 05 B6 [10] 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F");
                        #region C0 D6 05 B6 [10] 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
                        APDUCommand apduSize3 = new APDUCommand(0xC0, 0xD6, 0x05, 0xB6, null, 0);

                        APDUParam apduParam3 = new APDUParam();

                        apduParam3.Data = new byte[16] { 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F };

                        apduSize3.Update(apduParam3);

                        apduResp = iCard.Transmit(apduSize3);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -4;
                        }

                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 B0 05 E6 [10]");
                        #region C0 B0 05 E6 [10]
                        APDUCommand apduSize3_1 = new APDUCommand(0xC0, 0xB0, 0x05, 0xE6, null, 10);

                        apduResp = iCard.Transmit(apduSize3_1);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {

                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -5;
                        }

                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 D6 05 E6 [10] 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F");
                        #region C0 D6 05 E6 [10] 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
                        APDUCommand apduSize4 = new APDUCommand(0xC0, 0xD6, 0x05, 0xE6, null, 0);

                        APDUParam apduParam4 = new APDUParam();

                        apduParam4.Data = new byte[16] { 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F };

                        apduSize4.Update(apduParam4);

                        apduResp = iCard.Transmit(apduSize4);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {

                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -6;
                        }

                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 B0 06 16 [10]");
                        #region C0 B0 06 16 [10]
                        APDUCommand apduSize4_1 = new APDUCommand(0xC0, 0xB0, 0x06, 0x16, null, 10);

                        apduResp = iCard.Transmit(apduSize4_1);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -7;
                        }

                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 D6 06 16 [10] 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F");
                        #region C0 D6 06 16 [10] 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F

                        APDUCommand apduSize5 = new APDUCommand(0xC0, 0xD6, 0x06, 0x16, null, 0);

                        APDUParam apduParam5 = new APDUParam();

                        apduParam5.Data = new byte[16] { 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F };

                        apduSize5.Update(apduParam5);

                        apduResp = iCard.Transmit(apduSize5);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -8;
                        }
                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 B0 02 FC [01]");
                        #region C0 B0 02 FC [01]

                        APDUCommand apduSize6 = new APDUCommand(0xC0, 0xB0, 0x02, 0xFC, null, 1);

                        apduResp = iCard.Transmit(apduSize6);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -9;
                        }

                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 D6 02 FC [01] 96");
                        #region C0 D6 02 FC [01] 96
                        APDUCommand apduSize6_1 = new APDUCommand(0xC0, 0xD6, 0x02, 0xFC, null, 0);

                        APDUParam apduParam6_1 = new APDUParam();

                        apduParam6_1.Data = new byte[1] { 0x96 };

                        apduSize6_1.Update(apduParam6_1);

                        apduResp = iCard.Transmit(apduSize6_1);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -10;
                        }

                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 B0 03 1F [01]");
                        #region C0 B0 03 1F [01]

                        APDUCommand apduSize6_2 = new APDUCommand(0xC0, 0xB0, 0x03, 0x1F, null, 1);

                        apduResp = iCard.Transmit(apduSize6_2);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -11;
                        }

                        #endregion


                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("C0 D6 03 1F [01] 96");
                        #region C0 D6 03 1F [01] 96
                        APDUCommand apduSize6_3 = new APDUCommand(0xC0, 0xD6, 0x03, 0x1F, null, 0);

                        APDUParam apduParam6_3 = new APDUParam();

                        apduParam6_3.Data = new byte[1] { 0x96 };

                        apduSize6_3.Update(apduParam6_3);

                        apduResp = iCard.Transmit(apduSize6_3);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -12;
                        }

                        #endregion

                        Thread.Sleep(100);


                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }

                    {
                        log.Info("00 10 00 00");
                        #region 00 10 00 00

                        APDUCommand apduSize7 = new APDUCommand(0x00, 0x10, 0x00, 0x00, null, 0);

                        apduResp = iCard.Transmit(apduSize7);
                        if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                        {
                            LastOperationStatus = apduResp.ToString();
                            log.Error(apduResp.ToString());

                            return -13;
                        }

                        #endregion

                        Thread.Sleep(100);

                        log.Info(apduResp.Status);
                        log.Info(apduResp.ToString());
                    }
                }

                //RESET PART BEGIN
                iCard.Disconnect(DISCONNECT.Reset);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Unpower);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Eject);

                Connect2Card();

                iCard.Disconnect(DISCONNECT.Leave);

                Connect2Card();

                Thread.Sleep(1000);

                if (Connect2Card() != 0)
                {
                    LastOperationStatus = "Connction not estableshed";
                    log.Error(-15);

                    return -15;
                }

                //RESET PART END
                for (int i = 0; i <= 10; i++)
                {
                    Thread.Sleep(1000);

                    iCard.Disconnect(DISCONNECT.Reset);

                    Connect2Card();

                    if (extr.ExternalAuth() != 0)
                    {
                        LastOperationStatus = "ExternalAuth not estableshed";
                        log.Error(-16);
                    }
                    else
                    {
                        break;
                    }
                }


                #region install for load
                /*
CMD:  80 E6 02 00 [17] 07 A0 00 00 00 62 02 02 08 A0 00 00 01 51 00 00 00 00 03 35 01 08 00 ++
RES:  00 [9000]
CMD:  80 E6 02 00 [17] 07 A0 00 00 01 32 00 01 08 A0 00 00 01 51 00 00 00 00 03 35 01 0A 00 ++
RES:  00 [9000]
CMD:  80 E6 02 00 [18] 08 D2 76 00 00 98 6C 69 62 08 A0 00 00 01 51 00 00 00 00 03 35 01 0C 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [19] 09 D2 76 00 00 98 63 6F 72 65 08 A0 00 00 01 51 00 00 00 00 03 35 01 0E 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [18] 08 D2 76 00 00 98 65 78 74 08 A0 00 00 01 51 00 00 00 00 03 35 01 10 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [1B] 0B D2 76 00 00 98 63 6F 72 65 6B 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 12 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [18] 08 D2 76 00 00 98 4C 44 53 08 A0 00 00 01 51 00 00 00 00 03 35 01 1C 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [1C] 0C D2 76 00 00 98 54 52 30 33 31 31 30 08 A0 00 00 01 51 00 00 00 00 03 35 01 1E 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [1B] 0B D2 76 00 00 98 63 6F 72 65 61 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 14 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [1C] 0C D2 76 00 00 98 63 6F 72 65 62 69 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 16 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [1D] 0D D2 76 00 00 98 63 6F 72 65 72 75 6C 65 08 A0 00 00 01 51 00 00 00 00 03 35 01 18 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [19] 09 D2 76 00 00 98 61 75 74 68 08 A0 00 00 01 51 00 00 00 00 03 35 01 1A 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [15] 05 D2 76 00 00 98 08 A0 00 00 01 51 00 00 00 00 03 35 01 24 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [17] 07 D2 76 00 00 98 4D 44 08 A0 00 00 01 51 00 00 00 00 03 35 01 26 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [18] 08 D2 76 00 00 98 45 41 43 08 A0 00 00 01 51 00 00 00 00 03 35 01 28 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [18] 08 D2 76 00 00 98 65 49 44 08 A0 00 00 01 51 00 00 00 00 03 35 01 22 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [18] 08 D2 76 00 00 98 50 4B 49 08 A0 00 00 01 51 00 00 00 00 03 35 01 2A 00++
RES:  00 [9000]
CMD:  80 E6 02 00 [18] 08 D2 76 00 00 98 49 41 53 08 A0 00 00 01 51 00 00 00 00 03 35 01 20 00++
RES:  00 [9000]

                 */
                #endregion

                bool installLoadFail = false;

                {
                    log.Info("80 E6 02 00 [17] 07 A0 00 00 00 62 02 02 08 A0 00 00 01 51 00 00 00 00 03 35 01 08 00");
                    #region 80 E6 02 00 [17] 07 A0 00 00 00 62 02 02 08 A0 00 00 01 51 00 00 00 00 03 35 01 08 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[23] { 0x07, 0xA0, 0x00, 0x00, 0x00, 0x62, 0x02, 0x02, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x08, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();

                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [17] 07 A0 00 00 01 32 00 01 08 A0 00 00 01 51 00 00 00 00 03 35 01 0A 00");
                    #region 80 E6 02 00 [17] 07 A0 00 00 01 32 00 01 08 A0 00 00 01 51 00 00 00 00 03 35 01 0A 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[23] { 0x07, 0xA0, 0x00, 0x00, 0x01, 0x32, 0x00, 0x01, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x0A, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                        //return -18;
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [18] 08 D2 76 00 00 98 6C 69 62 08 A0 00 00 01 51 00 00 00 00 03 35 01 0C 00");
                    #region 80 E6 02 00 [18] 08 D2 76 00 00 98 6C 69 62 08 A0 00 00 01 51 00 00 00 00 03 35 01 0C 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[24] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x6C, 0x69, 0x62, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x0C, 0x00 };

                    apduSize5.Update(apduParam5);

                    log.Info(apduSize5.ToString());

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                        //return -19;
                    }
                    else
                    {
                        installLoadFail = true;
                    }

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                    #endregion
                }

                {
                    log.Info("80 E6 02 00 [19] 09 D2 76 00 00 98 63 6F 72 65 08 A0 00 00 01 51 00 00 00 00 03 35 01 0E 00");
                    #region 80 E6 02 00 [19] 09 D2 76 00 00 98 63 6F 72 65 08 A0 00 00 01 51 00 00 00 00 03 35 01 0E 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[25] { 0x09, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x63, 0x6F, 0x72, 0x65, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x0E, 0x00 };

                    apduSize5.Update(apduParam5);

                    log.Info(apduSize5.ToString());

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }

                    log.Info(apduResp.ToString());

                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [18] 08 D2 76 00 00 98 65 78 74 08 A0 00 00 01 51 00 00 00 00 03 35 01 10 00");

                    #region 80 E6 02 00 [18] 08 D2 76 00 00 98 65 78 74 08 A0 00 00 01 51 00 00 00 00 03 35 01 10 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[24] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x65, 0x78, 0x74, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x10, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [1B] 0B D2 76 00 00 98 63 6F 72 65 6B 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 12 00");

                    #region 80 E6 02 00 [1B] 0B D2 76 00 00 98 63 6F 72 65 6B 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 12 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[27] { 0x0B, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x63, 0x6F, 0x72, 0x65, 0x6B, 0x6F, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x12, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [18] 08 D2 76 00 00 98 4C 44 53 08 A0 00 00 01 51 00 00 00 00 03 35 01 1C 00");

                    #region 80 E6 02 00 [18] 08 D2 76 00 00 98 4C 44 53 08 A0 00 00 01 51 00 00 00 00 03 35 01 1C 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[24] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x4C, 0x44, 0x53, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x1C, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }

                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [1C] 0C D2 76 00 00 98 54 52 30 33 31 31 30 08 A0 00 00 01 51 00 00 00 00 03 35 01 1E 00");

                    #region 80 E6 02 00 [1C] 0C D2 76 00 00 98 54 52 30 33 31 31 30 08 A0 00 00 01 51 00 00 00 00 03 35 01 1E 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[28] { 0x0C, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x54, 0x52, 0x30, 0x33, 0x31, 0x31, 0x30, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x1E, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [1B] 0B D2 76 00 00 98 63 6F 72 65 61 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 14 00");

                    #region 80 E6 02 00 [1B] 0B D2 76 00 00 98 63 6F 72 65 61 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 14 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[27] { 0x0B, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x63, 0x6F, 0x72, 0x65, 0x61, 0x6F, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x14, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }

                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [1C] 0C D2 76 00 00 98 63 6F 72 65 62 69 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 16 00");

                    #region 80 E6 02 00 [1C] 0C D2 76 00 00 98 63 6F 72 65 62 69 6F 08 A0 00 00 01 51 00 00 00 00 03 35 01 16 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[28] { 0x0C, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x63, 0x6F, 0x72, 0x65, 0x62, 0x69, 0x6F, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x16, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [1D] 0D D2 76 00 00 98 63 6F 72 65 72 75 6C 65 08 A0 00 00 01 51 00 00 00 00 03 35 01 18 00");

                    #region 80 E6 02 00 [1D] 0D D2 76 00 00 98 63 6F 72 65 72 75 6C 65 08 A0 00 00 01 51 00 00 00 00 03 35 01 18 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[29] { 0x0D, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x63, 0x6F, 0x72, 0x65, 0x72, 0x75, 0x6C, 0x65, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x18, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [19] 09 D2 76 00 00 98 61 75 74 68 08 A0 00 00 01 51 00 00 00 00 03 35 01 1A 00");

                    #region 80 E6 02 00 [19] 09 D2 76 00 00 98 61 75 74 68 08 A0 00 00 01 51 00 00 00 00 03 35 01 1A 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[25] { 0x09, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x61, 0x75, 0x74, 0x68, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x1A, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [15] 05 D2 76 00 00 98 08 A0 00 00 01 51 00 00 00 00 03 35 01 24 00");

                    #region 80 E6 02 00 [15] 05 D2 76 00 00 98 08 A0 00 00 01 51 00 00 00 00 03 35 01 24 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[21] { 0x05, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x24, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [17] 07 D2 76 00 00 98 4D 44 08 A0 00 00 01 51 00 00 00 00 03 35 01 26 00");

                    #region 80 E6 02 00 [17] 07 D2 76 00 00 98 4D 44 08 A0 00 00 01 51 00 00 00 00 03 35 01 26 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[23] { 0x07, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x4D, 0x44, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x26, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [18] 08 D2 76 00 00 98 45 41 43 08 A0 00 00 01 51 00 00 00 00 03 35 01 28 00");

                    #region 80 E6 02 00 [18] 08 D2 76 00 00 98 45 41 43 08 A0 00 00 01 51 00 00 00 00 03 35 01 28 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[24] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x45, 0x41, 0x43, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x28, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [18] 08 D2 76 00 00 98 65 49 44 08 A0 00 00 01 51 00 00 00 00 03 35 01 22 00");

                    #region 80 E6 02 00 [18] 08 D2 76 00 00 98 65 49 44 08 A0 00 00 01 51 00 00 00 00 03 35 01 22 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[24] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x65, 0x49, 0x44, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x22, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                {
                    log.Info("80 E6 02 00 [18] 08 D2 76 00 00 98 50 4B 49 08 A0 00 00 01 51 00 00 00 00 03 35 01 2A 00");

                    #region 80 E6 02 00 [18] 08 D2 76 00 00 98 50 4B 49 08 A0 00 00 01 51 00 00 00 00 03 35 01 2A 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[24] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x50, 0x4B, 0x49, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x2A, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }


                {
                    log.Info("80 E6 02 00 [18] 08 D2 76 00 00 98 49 41 53 08 A0 00 00 01 51 00 00 00 00 03 35 01 20 00");

                    #region 80 E6 02 00 [18] 08 D2 76 00 00 98 49 41 53 08 A0 00 00 01 51 00 00 00 00 03 35 01 20 00

                    APDUCommand apduSize5 = new APDUCommand(0x80, 0xE6, 0x02, 0x00, null, 1);

                    APDUParam apduParam5 = new APDUParam();

                    apduParam5.Data = new byte[24] { 0x08, 0xD2, 0x76, 0x00, 0x00, 0x98, 0x49, 0x41, 0x53, 0x08, 0xA0, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x03, 0x35, 0x01, 0x20, 0x00 };

                    apduSize5.Update(apduParam5);

                    apduResp = iCard.Transmit(apduSize5);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        extr.ExternalAuth();
                    }
                    else
                    {
                        installLoadFail = true;
                    }
                    #endregion

                    log.Info(apduResp.Status);
                    log.Info(apduResp.ToString());
                }

                if (!installLoadFail)
                {
                    LastOperationStatus = "Failed to install. See Logs";
                    log.Error("Failed to install");

                    return -100;
                }

                if (extr.ExternalAuth() != 0)
                {
                    LastOperationStatus = "ExternalAuth not estableshed";
                    log.Error(-35);

                    return -35;
                }

                {
                    #region 80 F0 80 07
                    APDUCommand apduSize2 = new APDUCommand(0x80, 0xF0, 0x80, 0x07, null, 0);

                    apduResp = iCard.Transmit(apduSize2);
                    if (apduResp.Status != SC_OK && apduResp.SW1 != SC_PENDING)
                    {
                        LastOperationStatus = apduResp.ToString();
                        log.Error(apduResp.ToString());

                        return -36;
                    }
                    #endregion
                }

                if (mode == CardFactoryMode.DrivingLicence)
                {
                    InstallCardIDL();
                }
                else if (mode == CardFactoryMode.VehicleRegistration)
                {
                    InstallCardVL();
                }


                iCard.Disconnect(DISCONNECT.Reset);

            }
            catch (Exception ex)
            {
                log.Info("Exception Happened");
                log.Info(ex.Message);

                return 101;
            }

            return 0;
        }
    }
}
